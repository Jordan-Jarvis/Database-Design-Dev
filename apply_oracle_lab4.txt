SQL> -- ------------------------------------------------------------------
SQL> --  Enter Lab #4 Steps:
SQL> -- ------------------------------------------------------------------
SQL> 
SQL> -- ======================================================================
SQL> --  Step #1
SQL> --  -------
SQL> --   Write a query that returns the distinct member_id column from the
SQL> --   contact table where their last_name is 'Sweeney'.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: This does use a WHERE clause.
SQL> -- ----------------------------------------------------------------------
SQL> --  Purpose:
SQL> --  --------
SQL> --   The purpose of this program is to find a unique foreign key value,
SQL> --   which would can be used to reverse lookup the account_number and
SQL> --   credit_card_number in the member table. It presumes that the data
SQL> --   only has one unique last_name. The current data set meets that
SQL> --   criteria but as a later problem will explain, it is possible that
SQL> --   the table could hold two or more copies of the same last name
SQL> --   that link to different member_id values in the contact table.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: The following header for displaying the data.
SQL> --
SQL> --  COL member_id		FORMAT 9999  HEADING "Member|ID #"
SQL> -- ----------------------------------------------------------------------
SQL> --  Anticipated Results
SQL> -- ----------------------------------------------------------------------
SQL> --   Member
SQL> --   ID #
SQL> --   ------
SQL> --     1003
SQL> --
SQL> --   1 row selected.
SQL> -- ======================================================================
SQL> COL member_id	    FORMAT 9999  HEADING "Member|ID #"
SQL> select distinct member_id
  2  from contact
  3  where last_name = 'Sweeney';

Member                                                                          
  ID #                                                                          
------                                                                          
  1003                                                                          

1 row selected.

SQL> 
SQL> 
SQL> 
SQL> -- ======================================================================
SQL> --  Step #2
SQL> --  -------
SQL> --   Write a query that returns the last_name column from the contact
SQL> --   table and the account_number and credit_card_number from the member
SQL> --   table. The WHERE clause should filter the data set based on the
SQL> --   last_name column in the contact table where the last name equals
SQL> --   a case insensitive 'SWEENEY'. Text matches are case sensitive in
SQL> --   the Oracle database and you will need to promote both sides of the
SQL> --   filtering statement to uppercase or demote both sides to lowercase
SQL> --   strings. The from clause should use an "ON" subclause that joins
SQL> --   the two tables on the member_id column that is found in both tables.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: This does use a WHERE clause.
SQL> -- ----------------------------------------------------------------------
SQL> --  Purpose:
SQL> --  --------
SQL> --   The purpose of this program is to use the last name to find a
SQL> --   customer's account_number and credit_card_number.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: The following header for displaying the data.
SQL> --
SQL> --  COL last_name		 FORMAT A10  HEADING "Last Name"
SQL> --  COL account_number	 FORMAT A10  HEADING "Account|Number"
SQL> --  COL credit_card_number  FORMAT A19  HEADING "Credit Card Number"
SQL> -- ----------------------------------------------------------------------
SQL> --  Anticipated Results
SQL> -- ----------------------------------------------------------------------
SQL> -- 	     Account
SQL> --   Last Name  Number	Credit Card Number
SQL> --   ---------- ---------- -------------------
SQL> --   Sweeney    B293-71447 3333-4444-5555-6666
SQL> --   Sweeney    B293-71447 3333-4444-5555-6666
SQL> --   Sweeney    B293-71447 3333-4444-5555-6666
SQL> --
SQL> --   3 rows selected.
SQL> -- ======================================================================
SQL> COL last_name	     FORMAT A10  HEADING "Last Name"
SQL> COL account_number      FORMAT A10  HEADING "Account|Number"
SQL> COL credit_card_number  FORMAT A19  HEADING "Credit Card Number"
SQL> select c.last_name, m.account_number, m.credit_card_number
  2  from contact c join member m on c.member_id = m.member_id
  3  where upper(last_name) = 'SWEENEY';

           Account                                                              
Last Name  Number     Credit Card Number                                        
---------- ---------- -------------------                                       
Sweeney    B293-71447 3333-4444-5555-6666                                       
Sweeney    B293-71447 3333-4444-5555-6666                                       
Sweeney    B293-71447 3333-4444-5555-6666                                       

3 rows selected.

SQL> 
SQL> 
SQL> -- ======================================================================
SQL> --  Step #3
SQL> --  -------
SQL> --   Write a query that returns the distinct row of last_name column
SQL> --   from the contact table and the account_number and credit_card_number
SQL> --   from the member table. The WHERE clause should filter the data set
SQL> --   based on the last_name column in the contact table where the last
SQL> --   name equals a case insensitive 'SWEENEY'. Text matches are case
SQL> --   sensitive in the Oracle database and you will need to promote both
SQL> --   sides of the filtering statement to uppercase or demote both sides
SQL> --   to lowercase strings. The from clause should use an "ON" subclause
SQL> --   that joins the two tables on the member_id column that is found in
SQL> --   both tables.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: This does use WHERE and a DISTINCT keyword in the SELECT-list.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: The following header for displaying the data.
SQL> --
SQL> --  COL last_name		 FORMAT A10  HEADING "Last Name"
SQL> --  COL account_number	 FORMAT A10  HEADING "Account|Number"
SQL> --  COL credit_card_number  FORMAT A19  HEADING "Credit Card Number"
SQL> -- ----------------------------------------------------------------------
SQL> --  Anticipated Results
SQL> -- ----------------------------------------------------------------------
SQL> -- 	     Account
SQL> --   Last Name  Number	Credit Card Number
SQL> --   ---------- ---------- -------------------
SQL> --   Sweeney    B293-71447 3333-4444-5555-6666
SQL> --
SQL> --   1 row selected.
SQL> -- ======================================================================
SQL> COL last_name	     FORMAT A10  HEADING "Last Name"
SQL> COL account_number      FORMAT A10  HEADING "Account|Number"
SQL> COL credit_card_number  FORMAT A19  HEADING "Credit Card Number"
SQL> select distinct c.last_name, m.account_number, m.credit_card_number
  2  from contact c join member m on c.member_id = m.member_id
  3  where upper(last_name) = 'SWEENEY';

           Account                                                              
Last Name  Number     Credit Card Number                                        
---------- ---------- -------------------                                       
Sweeney    B293-71447 3333-4444-5555-6666                                       

1 row selected.

SQL> 
SQL> 
SQL> -- ======================================================================
SQL> --  Step #4
SQL> --  -------
SQL> --   Write a query that returns the last_name from the contact table,
SQL> --   the account_number and credit_card_number from the member table,
SQL> --   and the city, state_province, and postal_code columns from the
SQL> --   address table. You need to concatenate the city, state_province,
SQL> --   and postal_code columns, and assign an address alias as follows:
SQL> --
SQL> --     San Jose, CA 95102
SQL> --
SQL> --   You should use a WHERE clause to filter the data set for the
SQL> --   'Visquel' family regardless of the case sensitive entry of the
SQL> --   families surname. A three table join is done in two steps inside
SQL> --   the FROM clause. You join one table to a second table based on a
SQL> --   shared column value, like the member_id column. The first part of
SQL> --   the join returns a temporary result set that you use like a table
SQL> --   in a two table join. You join the third table by using a shared
SQL> --   column of primary and foreign key, like contact_id, which is found
SQL> --   in the contact and address tables. You also want to return only
SQL> --   the distinct row for the data.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: This does use a WHERE and a DISTINCT keyword in the SELECT-list.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: The following header for displaying the data.
SQL> --
SQL> --  COL last_name		 FORMAT A10  HEADING "Last Name"
SQL> --  COL account_number	 FORMAT A10  HEADING "Account|Number"
SQL> --  COL credit_card_number  FORMAT A19  HEADING "Credit Card Number"
SQL> --  COL address		 FORMAT A22  HEADING "Address"
SQL> -- ----------------------------------------------------------------------
SQL> --  Anticipated Results
SQL> -- ----------------------------------------------------------------------
SQL> -- 	     Account
SQL> --   Last Name  Number	Credit Card Number  Address
SQL> --   ---------- ---------- ------------------- ----------------------
SQL> --   Vizquel    B293-71446 2222-3333-4444-5555 San Jose, CA 95192
SQL> --
SQL> --   1 row selected.
SQL> -- ======================================================================
SQL> COL last_name	     FORMAT A10  HEADING "Last Name"
SQL> COL account_number      FORMAT A10  HEADING "Account|Number"
SQL> COL credit_card_number  FORMAT A19  HEADING "Credit Card Number"
SQL> COL address	     FORMAT A22  HEADING "Address"
SQL> select distinct last_name, account_number, credit_card_number, a.city || ', ' || a.state_province || ' ' || a.postal_code as address
  2  from contact c join member m on c.member_id = m.member_id join address a on c.contact_id = a.contact_id
  3  where upper(last_name) = 'VIZQUEL';

           Account                                                              
Last Name  Number     Credit Card Number  Address                               
---------- ---------- ------------------- ----------------------                
Vizquel    B293-71446 2222-3333-4444-5555 San Jose, CA 95192                    

1 row selected.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> -- ======================================================================
SQL> --  Step #5
SQL> --  -------
SQL> --   Write a query that returns the last_name from the contact table,
SQL> --   the account_number and credit_card_number from the member table,
SQL> --   the street_address from the street_address table, and the city,
SQL> --   state_province, and postal_code columns from the address table.
SQL> --   You need to concatenate the street_address from the street_address
SQL> --   table, a line return, city, state_province, and postal_code
SQL> --   columns from the address table, and assign an address alias to
SQL> --   the two row return as follows:
SQL> --
SQL> --     12 El Camino Real
SQL> --     San Jose, CA 95102
SQL> --
SQL> --   You should use a WHERE clause to filter the data set for the
SQL> --   'Visquel' family regardless of the case sensitive entry of the
SQL> --   families surname. A three table join is done in two steps inside
SQL> --   the FROM clause. You join one table to a second table based on a
SQL> --   shared column value, like the member_id column. The first part of
SQL> --   the join returns a temporary result set that you use like a table
SQL> --   in a two table join. You join the third table by using a shared
SQL> --   column of primary and foreign key, like contact_id, which is found
SQL> --   in the contact and address tables. The three table join can now be
SQL> --   extended to a four table join by using the address_id column in the
SQL> --   address table and the address_id column in the street_address table.
SQL> --   You also want to return only the distinct row for the data.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: This does use a WHERE and a DISTINCT keyword in the SELECT-list,
SQL> --        and you create a line return like this: ||CHR(10)||.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: The following header for displaying the data.
SQL> --
SQL> --  COL last_name		 FORMAT A10  HEADING "Last Name"
SQL> --  COL account_number	 FORMAT A10  HEADING "Account|Number"
SQL> --  COL credit_card_number  FORMAT A19  HEADING "Credit Card Number"
SQL> --  COL address		 FORMAT A22  HEADING "Address"
SQL> -- ----------------------------------------------------------------------
SQL> --  Anticipated Results
SQL> -- ----------------------------------------------------------------------
SQL> -- 	     Account
SQL> --   Last Name  Number	Credit Card Number  Address
SQL> --   ---------- ---------- ------------------- ----------------------
SQL> --   Vizquel    B293-71446 2222-3333-4444-5555 12 El Camino Real
SQL> -- 					    San Jose, CA 95192
SQL> --
SQL> --   1 row selected.
SQL> -- ======================================================================
SQL> COL last_name	     FORMAT A10  HEADING "Last Name"
SQL> COL account_number      FORMAT A10  HEADING "Account|Number"
SQL> COL credit_card_number  FORMAT A19  HEADING "Credit Card Number"
SQL> COL address	     FORMAT A22  HEADING "Address"
SQL> select
  2  distinct last_name,
  3  account_number,
  4  credit_card_number,
  5  s.street_address || CHR(10) || a.city || ', ' || a.state_province || ' ' || a.postal_code as address
  6  from contact c
  7  join member m on c.member_id = m.member_id
  8  join address a on c.contact_id = a.contact_id
  9  join street_address s on a.address_id = s.address_id
 10  where upper(last_name) = 'VIZQUEL';

           Account                                                              
Last Name  Number     Credit Card Number  Address                               
---------- ---------- ------------------- ----------------------                
Vizquel    B293-71446 2222-3333-4444-5555 12 El Camino Real                     
                                          San Jose, CA 95192                    
                                                                                

1 row selected.

SQL> 
SQL> 
SQL> -- ======================================================================
SQL> --  Step #6
SQL> --  -------
SQL> --   Write a query that returns the last_name from the contact table,
SQL> --   the account_number from the member table, the street_address from
SQL> --   the street_address table, and the city, state_province, and
SQL> --   postal_code columns from the address table.
SQL> --
SQL> --   You need to concatenate the street_address from the street_address
SQL> --   table, a line return, city, state_province, and postal_code
SQL> --   columns from the address table, and assign an address alias to
SQL> --   the two row return as follows:
SQL> --
SQL> --     12 El Camino Real
SQL> --     San Jose, CA 95102
SQL> --
SQL> --   You should use a WHERE clause to filter the data set for the
SQL> --   'Visquel' family regardless of the case sensitive entry of the
SQL> --   families surname. A three table join is done in two steps inside
SQL> --   the FROM clause. You join one table to a second table based on a
SQL> --   shared column value, like the member_id column. The first part of
SQL> --   the join returns a temporary result set that you use like a table
SQL> --   in a two table join. You join the third table by using a shared
SQL> --   column of primary and foreign key, like contact_id, which is found
SQL> --   in the contact and address tables. The three table join can now be
SQL> --   extended to a four table join by using the address_id column in the
SQL> --   address table and the address_id column in the street_address table.
SQL> --
SQL> --   You can now extend the four table join to a five table join by
SQL> --   adding the telephone table, which you can join to the contact_id
SQL> --   column in the contact and telephone tabbles.
SQL> --
SQL> --   You also want to concatenate the area_code column and
SQL> --   telephone_number columns in the telephone table as a single
SQL> --   column with parentheses around the area code. You achieve this
SQL> --   concatenated result and assign it to a telephone alias.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: This does use a WHERE and a DISTINCT keyword in the SELECT-list,
SQL> --        and you create a line return like this: ||CHR(10)||.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: The following header for displaying the data.
SQL> --
SQL> --  COL last_name		 FORMAT A10  HEADING "Last Name"
SQL> --  COL account_number	 FORMAT A10  HEADING "Account|Number"
SQL> --  COL address		 FORMAT A22  HEADING "Address"
SQL> --  COL telephone		 FORMAT A14  HEADING "Telephone"
SQL> -- ----------------------------------------------------------------------
SQL> --  Anticipated Results
SQL> -- ----------------------------------------------------------------------
SQL> -- 	     Account
SQL> --   Last Name  Number	Address 	       TELEPHONE
SQL> --   ---------- ---------- ---------------------- -------------------
SQL> --   Vizquel    B293-71446 12 El Camino Real      (408) 222-2222
SQL> -- 			San Jose, CA 95192
SQL> --
SQL> --   1 rows selected.
SQL> -- ======================================================================
SQL> COL last_name	     FORMAT A10  HEADING "Last Name"
SQL> COL account_number      FORMAT A10  HEADING "Account|Number"
SQL> COL address	     FORMAT A22  HEADING "Address"
SQL> COL telephone	     FORMAT A14  HEADING "Telephone"
SQL> select
  2  distinct last_name,
  3  account_number,
  4  s.street_address || CHR(10) || a.city || ', ' || a.state_province || ' ' || a.postal_code as address,
  5  '(' || t.area_code || ') ' || telephone_number as telephone
  6  from contact c
  7  join member m on c.member_id = m.member_id
  8  join address a on c.contact_id = a.contact_id
  9  join street_address s on a.address_id = s.address_id
 10  join telephone t on c.contact_id = t.contact_id
 11  where upper(last_name) = 'VIZQUEL';

           Account                                                              
Last Name  Number     Address                Telephone                          
---------- ---------- ---------------------- --------------                     
Vizquel    B293-71446 12 El Camino Real      (408) 222-2222                     
                      San Jose, CA 95192                                        
                                                                                

1 row selected.

SQL> 
SQL> 
SQL> 
SQL> -- ======================================================================
SQL> --  Step #7
SQL> --  -------
SQL> --   Rewrite the query from Step #6 to include the DISTINCT operator
SQL> --   from the SELECT-list but remove the WHERE clause filter on the
SQL> --   contact's last_name value. Don't forget to change the width of
SQL> --   display for the address column; and make sure to use the
SQL> --   following additional SQL*PLus formatting command:
SQL> --
SQL> --   SET PAGESIZE 99
SQL> --
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: This does not use a WHERE clause but it uses a DISTINCT keyword
SQL> --        in the SELECT-list, and you create a line return like this:
SQL> --        ||CHR(10)||.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: The following header for displaying the data.
SQL> --
SQL> --  COL last_name		 FORMAT A10  HEADING "Last Name"
SQL> --  COL account_number	 FORMAT A10  HEADING "Account|Number"
SQL> --  COL address		 FORMAT A24  HEADING "Address"
SQL> --  COL telephone		 FORMAT A14  HEADING "Telephone"
SQL> -- ----------------------------------------------------------------------
SQL> --  Anticipated Results
SQL> -- ----------------------------------------------------------------------
SQL> -- 	     Account
SQL> --   Last Name  Number	Address 		 Telephone
SQL> --   ---------- ---------- ------------------------ -------------------
SQL> --   Winn	     B293-71445 10 El Camino Real	 (408) 111-1111
SQL> -- 			San Jose, CA 95192
SQL> --
SQL> --   Vizquel    B293-71446 12 El Camino Real	 (408) 222-2222
SQL> -- 			San Jose, CA 95192
SQL> --
SQL> --   Sweeney    B293-71447 14 El Camino Real	 (408) 333-3333
SQL> -- 			San Jose, CA 95192
SQL> --
SQL> --   Clinton    R11-514-34 118 South 9th East	 (801) 423-1234
SQL> -- 			Provo, Utah 84606
SQL> --
SQL> --   Moss	     R11-514-35 1218 South 10th East	 (801) 423-1235
SQL> -- 			Provo, Utah 84606
SQL> --
SQL> --   Gretelz    R11-514-36 2118 South 7th East	 (801) 423-1236
SQL> -- 			Provo, Utah 84606
SQL> --
SQL> --   Royal      R11-514-37 2228 South 14th East	 (801) 423-1237
SQL> -- 			Provo, Utah 84606
SQL> --
SQL> --   Smith      R11-514-38 333 North 2nd East	 (801) 423-1238
SQL> -- 			Spanish Fork, Utah 84606
SQL> --
SQL> --
SQL> --   8 rows selected.
SQL> -- ======================================================================
SQL> SET PAGESIZE 99
SQL> COL last_name	     FORMAT A10  HEADING "Last Name"
SQL> COL account_number      FORMAT A10  HEADING "Account|Number"
SQL> COL address	     FORMAT A24  HEADING "Address"
SQL> COL telephone	     FORMAT A14  HEADING "Telephone"
SQL> select
  2  distinct last_name,
  3  account_number,
  4  s.street_address || CHR(10) || a.city || ', ' || a.state_province || ' ' || a.postal_code as address,
  5  '(' || t.area_code || ') ' || telephone_number as telephone
  6  from contact c
  7  join member m on c.member_id = m.member_id
  8  join address a on c.contact_id = a.contact_id
  9  join street_address s on a.address_id = s.address_id
 10  join telephone t on c.contact_id = t.contact_id
 11  order by account_number;

           Account                                                              
Last Name  Number     Address                  Telephone                        
---------- ---------- ------------------------ --------------                   
Winn       B293-71445 10 El Camino Real        (408) 111-1111                   
                      San Jose, CA 95192                                        
                                                                                
Vizquel    B293-71446 12 El Camino Real        (408) 222-2222                   
                      San Jose, CA 95192                                        
                                                                                
Sweeney    B293-71447 14 El Camino Real        (408) 333-3333                   
                      San Jose, CA 95192                                        
                                                                                
Clinton    R11-514-34 118 South 9th East       (801) 423-1234                   
                      Provo, Utah 84606                                         
                                                                                
Moss       R11-514-35 1218 South 10th East     (801) 423-1235                   
                      Provo, Utah 84606                                         
                                                                                
Gretelz    R11-514-36 2118 South 7th East      (801) 423-1236                   
                      Provo, Utah 84606                                         
                                                                                
Royal      R11-514-37 2228 South 14th East     (801) 423-1237                   
                      Provo, Utah 84606                                         
                                                                                
Smith      R11-514-38 333 North 2nd East       (801) 423-1238                   
                      Spanish Fork, Utah 84606                                  
                                                                                

8 rows selected.

SQL> 
SQL> 
SQL> -- ======================================================================
SQL> --  Step #8
SQL> --  -------
SQL> --   Rewrite the query from Step #7 to include the DISTINCT operator
SQL> --   from the SELECT-list but remove the WHERE clause filter on the
SQL> --   contact's last_name value. Then, join the five table query to
SQL> --   the rental table by using the contact_id column from the contact
SQL> --   table and the customer_id column from the rental table. Don't
SQL> --   forget to change the width of display for the address column;
SQL> --   and make sure to use the following additional SQL*PLus formatting
SQL> --   command:
SQL> --
SQL> --   SET PAGESIZE 99
SQL> --
SQL> --   The new query only returns customers who have a rental agreement.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: This does not use a WHERE clause but it uses a DISTINCT keyword
SQL> --        in the SELECT-list, and you create a line return like this:
SQL> --        ||CHR(10)||.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: The following header for displaying the data.
SQL> --
SQL> --  COL last_name		 FORMAT A10  HEADING "Last Name"
SQL> --  COL account_number	 FORMAT A10  HEADING "Account|Number"
SQL> --  COL address		 FORMAT A24  HEADING "Address"
SQL> --  COL telephone		 FORMAT A14  HEADING "Telephone"
SQL> -- ----------------------------------------------------------------------
SQL> --  Anticipated Results
SQL> -- ----------------------------------------------------------------------
SQL> -- 	     Account
SQL> --   Last Name  Number	Address 		 Telephone
SQL> --   ---------- ---------- ------------------------ -------------------
SQL> --   Sweeney    B293-71447 14 El Camino Real	 (408) 333-3333
SQL> -- 			San Jose, CA 95192
SQL> --
SQL> --   Winn	     B293-71445 10 El Camino Real	 (408) 111-1111
SQL> -- 			San Jose, CA 95192
SQL> --
SQL> --   Vizquel    B293-71446 12 El Camino Real	 (408) 222-2222
SQL> -- 			San Jose, CA 95192
SQL> --
SQL> --   3 rows selected.
SQL> -- ======================================================================
SQL> SET PAGESIZE 99
SQL> COL last_name	     FORMAT A10  HEADING "Last Name"
SQL> COL account_number      FORMAT A10  HEADING "Account|Number"
SQL> COL address	     FORMAT A24  HEADING "Address"
SQL> COL telephone	     FORMAT A14  HEADING "Telephone"
SQL> select
  2  distinct last_name,
  3  account_number,
  4  s.street_address || CHR(10) || a.city || ', ' || a.state_province || ' ' || a.postal_code as address,
  5  '(' || t.area_code || ') ' || telephone_number as telephone
  6  from contact c
  7  join member m on c.member_id = m.member_id
  8  join address a on c.contact_id = a.contact_id
  9  join street_address s on a.address_id = s.address_id
 10  join telephone t on c.contact_id = t.contact_id
 11  join rental r on c.contact_id = r.customer_id;

           Account                                                              
Last Name  Number     Address                  Telephone                        
---------- ---------- ------------------------ --------------                   
Vizquel    B293-71446 12 El Camino Real        (408) 222-2222                   
                      San Jose, CA 95192                                        
                                                                                
Winn       B293-71445 10 El Camino Real        (408) 111-1111                   
                      San Jose, CA 95192                                        
                                                                                
Sweeney    B293-71447 14 El Camino Real        (408) 333-3333                   
                      San Jose, CA 95192                                        
                                                                                

3 rows selected.

SQL> 
SQL> 
SQL> 
SQL> -- ======================================================================
SQL> --  Step #9
SQL> --  -------
SQL> --   Rewrite the query from Step #8. Change the inner join between the
SQL> --   the result set and the rental table to a left join and add an
SQL> --   order by clause that uses the last_name column.
SQL> --
SQL> --  Note: This query will identify customers who have yet to make a
SQL> --        rental in order to target them with a promotional
SQL> --        advertisement.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: This does not use a WHERE clause but it uses a DISTINCT keyword
SQL> --        in the SELECT-list, and you create a line return like this:
SQL> --        ||CHR(10)||.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: The following header for displaying the data.
SQL> --
SQL> --  COL last_name		 FORMAT A10  HEADING "Last Name"
SQL> --  COL account_number	 FORMAT A10  HEADING "Account|Number"
SQL> --  COL address		 FORMAT A24  HEADING "Address"
SQL> --  COL telephone		 FORMAT A14  HEADING "Telephone"
SQL> -- ----------------------------------------------------------------------
SQL> --  Anticipated Results
SQL> -- ----------------------------------------------------------------------
SQL> -- 	     Account
SQL> --   Last Name  Number	Address 		 TELEPHONE
SQL> --   ---------- ---------- ------------------------ -------------------
SQL> --   Clinton    R11-514-34 118 South 9th East	 (801) 423-1234
SQL> -- 			Provo, Utah 84606
SQL> --
SQL> --   Gretelz    R11-514-36 2118 South 7th East	 (801) 423-1236
SQL> -- 			Provo, Utah 84606
SQL> --
SQL> --   Moss	     R11-514-35 1218 South 10th East	 (801) 423-1235
SQL> -- 			Provo, Utah 84606
SQL> --
SQL> --   Royal      R11-514-37 2228 South 14th East	 (801) 423-1237
SQL> -- 			Provo, Utah 84606
SQL> --
SQL> --   Smith      R11-514-38 333 North 2nd East	 (801) 423-1238
SQL> -- 			Spanish Fork, Utah 84606
SQL> --
SQL> --   Sweeney    B293-71447 14 El Camino Real	 (408) 333-3333
SQL> -- 			San Jose, CA 95192
SQL> --
SQL> --   Vizquel    B293-71446 12 El Camino Real	 (408) 222-2222
SQL> -- 			San Jose, CA 95192
SQL> --
SQL> --   Winn	     B293-71445 10 El Camino Real	 (408) 111-1111
SQL> -- 			San Jose, CA 95192
SQL> --
SQL> --   8 rows selected.
SQL> -- ======================================================================
SQL> SET PAGESIZE 99
SQL> COL last_name	     FORMAT A10  HEADING "Last Name"
SQL> COL account_number      FORMAT A10  HEADING "Account|Number"
SQL> COL address	     FORMAT A24  HEADING "Address"
SQL> COL telephone	     FORMAT A14  HEADING "Telephone"
SQL> select
  2  distinct last_name,
  3  account_number,
  4  s.street_address || CHR(10) || a.city || ', ' || a.state_province || ' ' || a.postal_code as address,
  5  '(' || t.area_code || ') ' || telephone_number as telephone
  6  from contact c
  7  join member m on c.member_id = m.member_id
  8  join address a on c.contact_id = a.contact_id
  9  join street_address s on a.address_id = s.address_id
 10  join telephone t on c.contact_id = t.contact_id
 11  left join rental r on c.contact_id = r.customer_id
 12  order by last_name;

           Account                                                              
Last Name  Number     Address                  Telephone                        
---------- ---------- ------------------------ --------------                   
Clinton    R11-514-34 118 South 9th East       (801) 423-1234                   
                      Provo, Utah 84606                                         
                                                                                
Gretelz    R11-514-36 2118 South 7th East      (801) 423-1236                   
                      Provo, Utah 84606                                         
                                                                                
Moss       R11-514-35 1218 South 10th East     (801) 423-1235                   
                      Provo, Utah 84606                                         
                                                                                
Royal      R11-514-37 2228 South 14th East     (801) 423-1237                   
                      Provo, Utah 84606                                         
                                                                                
Smith      R11-514-38 333 North 2nd East       (801) 423-1238                   
                      Spanish Fork, Utah 84606                                  
                                                                                
Sweeney    B293-71447 14 El Camino Real        (408) 333-3333                   
                      San Jose, CA 95192                                        
                                                                                
Vizquel    B293-71446 12 El Camino Real        (408) 222-2222                   
                      San Jose, CA 95192                                        
                                                                                
Winn       B293-71445 10 El Camino Real        (408) 111-1111                   
                      San Jose, CA 95192                                        
                                                                                

8 rows selected.

SQL> 
SQL> 
SQL> 
SQL> -- ======================================================================
SQL> --  Step #10
SQL> --  --------
SQL> --   Rewrite the query from Step #8. Add a join from the rental table
SQL> --   to the rental_item table by using the rental_id column in both
SQL> --   tables; and a join from the rental_item table to the item table
SQL> --   by using the item_id column in both tables.
SQL> --
SQL> --   Move the telephone number into position as the first of three
SQL> --   rows in the address column and add a WHERE clause that looks
SQL> --   for an item_title that starts with 'Stir Wars' or 'Star Wars'.
SQL> --   Change the ORDER BY from using the last_name to using the
SQL> --   item_title column.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: This uses WHERE and ORDER BY clauses, and both single
SQL> --        character and multiple character wild card operators.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: The following header for displaying the data.
SQL> --
SQL> --  COL last_name		 FORMAT A10  HEADING "Last Name"
SQL> --  COL account_number	 FORMAT A10  HEADING "Account|Number"
SQL> --  COL address		 FORMAT A24  HEADING "Address"
SQL> --  COL item_title 	 FORMAT A14  HEADING "Item Title"
SQL> -- ----------------------------------------------------------------------
SQL> --  Anticipated Results
SQL> -- ----------------------------------------------------------------------
SQL> -- 	     Account
SQL> --   Last Name  Number	Address 		 Item Title
SQL> --   ---------- ---------- ------------------------ --------------
SQL> --   Vizquel    B293-71446 (408) 222-2222		 Star Wars I
SQL> -- 			12 El Camino Real
SQL> -- 			San Jose, CA 95192
SQL> --
SQL> --   Vizquel    B293-71446 (408) 222-2222		 Star Wars II
SQL> -- 			12 El Camino Real
SQL> -- 			San Jose, CA 95192
SQL> --
SQL> --   Vizquel    B293-71446 (408) 222-2222		 Star Wars III
SQL> -- 			12 El Camino Real
SQL> -- 			San Jose, CA 95192
SQL> --
SQL> --   3 row selected.
SQL> -- ======================================================================
SQL> SET PAGESIZE 99
SQL> COL last_name	     FORMAT A10  HEADING "Last Name"
SQL> COL account_number      FORMAT A10  HEADING "Account|Number"
SQL> COL address	     FORMAT A24  HEADING "Address"
SQL> COL item_title	     FORMAT A14  HEADING "Item Title"
SQL> select
  2  distinct last_name,
  3  account_number,
  4  '(' || t.area_code || ') ' || telephone_number || CHR(10) || s.street_address || CHR(10) || a.city || ', ' || a.state_province || ' ' || a.postal_code as address,
  5  i.item_title
  6  from contact c
  7  join member m on c.member_id = m.member_id
  8  join address a on c.contact_id = a.contact_id
  9  join street_address s on a.address_id = s.address_id
 10  join telephone t on c.contact_id = t.contact_id
 11  join rental r on c.contact_id = r.customer_id
 12  join rental_item ri on r.rental_id = ri.rental_id
 13  join item i on ri.item_id = i.item_id
 14  where i.item_title like 'St_r%'
 15  order by item_title;

           Account                                                              
Last Name  Number     Address                  Item Title                       
---------- ---------- ------------------------ --------------                   
Vizquel    B293-71446 (408) 222-2222           Star Wars I                      
                      12 El Camino Real                                         
                      San Jose, CA 95192                                        
                                                                                
Vizquel    B293-71446 (408) 222-2222           Star Wars II                     
                      12 El Camino Real                                         
                      San Jose, CA 95192                                        
                                                                                
Vizquel    B293-71446 (408) 222-2222           Star Wars III                    
                      12 El Camino Real                                         
                      San Jose, CA 95192                                        
                                                                                

3 rows selected.

SQL> 
SQL> 
SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> --  Close log file.
SQL> -- ----------------------------------------------------------------------
SQL> SPOOL OFF
