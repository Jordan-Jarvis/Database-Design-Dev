SQL> 
SQL> -- ------------------------------------------------------------------
SQL> --  Enter Lab #4 Steps:
SQL> -- ------------------------------------------------------------------
SQL> 
SQL> -- ======================================================================
SQL> --  Task #1
SQL> --  -------
SQL> --   This task involves learning how to review how you write scalar
SQL> --   subqueries, and how you join tables recursively. The last problem
SQL> --   lets you visualize the resetting of foreign key values.
SQL> -- ======================================================================
SQL> --  Step #1
SQL> --  -------
SQL> --   Write a query that returns the distinct system_user_id column from
SQL> --   system_user table where the system_user_name is 'DBA1'.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: This does use a WHERE clause.
SQL> -- ----------------------------------------------------------------------
SQL> --  Purpose:
SQL> --  --------
SQL> --   The purpose of this script is to find a unique primary key value,
SQL> --   which is the system_user_id column and a surrogate key for the
SQL> --   the unique and not null natural primary key. The natural primary
SQL> --   key is the system_user_name.
SQL> --
SQL> --   A query that returns one column and one row is a scalar query
SQL> --   and is often used to retrieve a primary key value from a table and
SQL> --   insert it into a foreign key column in another table. It also can
SQL> --   be used to retrieve a primary key value form a table and insert
SQL> --   the value into a self-referencing foreign key column in the same
SQL> --   table.
SQL> --
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: The following header for displaying the data.
SQL> --
SQL> --  COL system_user_id  FORMAT 9999  HEADING "System|User|ID #"
SQL> -- ----------------------------------------------------------------------
SQL> --  Anticipated Results
SQL> -- ----------------------------------------------------------------------
SQL> --   System
SQL> --   User
SQL> --   ID #
SQL> --   ------
SQL> --     1001
SQL> --
SQL> --   1 row selected.
SQL> -- ======================================================================
SQL> COL system_user_id  FORMAT 9999  HEADING "System|User|ID #"
SQL> select system_user_id
  2  from system_user
  3  where system_user_name = 'DBA1';

System                                                                          
  User                                                                          
  ID #                                                                          
------                                                                          
  1001                                                                          

1 row selected.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> -- ======================================================================
SQL> --  Step #2
SQL> --  -------
SQL> --   Write a query that returns the system_user_id and system_user_name
SQL> --   columns from the system_user table where the system_user_name is
SQL> --   'DBA1'.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: This does use a WHERE clause.
SQL> -- ----------------------------------------------------------------------
SQL> --  Purpose:
SQL> --  --------
SQL> --   The purpose of this script is to find a unique primary key value
SQL> --   and system_user_name column. While the system_user_name is used
SQL> --   in the WHERE clause to find the primary key value, it shows you
SQL> --   that all columns fo the same row are in the result set from a
SQL> --   single table query.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: The following header for displaying the data.
SQL> --
SQL> --  COL system_user_id    FORMAT 9999  HEADING "System User|ID #"
SQL> --  COL system_user_name  FORMAT A12   HEADING "System User|Name"
SQL> -- ----------------------------------------------------------------------
SQL> --  Anticipated Results
SQL> -- ----------------------------------------------------------------------
SQL> --   System User System User
SQL> -- 	 ID # Name
SQL> --   ----------- ------------
SQL> -- 	 1001 DBA1
SQL> --
SQL> --   1 row selected.
SQL> -- ======================================================================
SQL> COL system_user_id    FORMAT 9999	HEADING "System User|ID #"
SQL> COL system_user_name  FORMAT A12	HEADING "System User|Name"
SQL> select system_user_id, system_user_name
  2  from system_user
  3  where system_user_name = 'DBA1';

System User System User                                                         
       ID # Name                                                                
----------- ------------                                                        
       1001 DBA1                                                                

1 row selected.

SQL> 
SQL> 
SQL> 
SQL> -- ======================================================================
SQL> --  Step #3
SQL> --  -------
SQL> --   Write a query that returns the system_user_id and system_user_name
SQL> --   columns from one copy of the system_user table by using an 'su1'
SQL> --   alias and the system_user_name from a second copy of the
SQL> --   system_user table by using an 'su2' alias. You should join the
SQL> --   two copies by doing the following:
SQL> --
SQL> --     - Find the row of the 'su1' aliased table where the
SQL> --       system_user_name is 'DBA1'.
SQL> --     - Join the copy of the system_user table with an alias of 'su1'
SQL> --       to the other copy of the system_user table with an alias of
SQL> --       'su2' by joining the two copies of the same table with the
SQL> --       su1.created_by column and su2.system_user_id.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: This does use a WHERE clause.
SQL> -- ----------------------------------------------------------------------
SQL> --  Purpose:
SQL> --  --------
SQL> --   This type of join uses the foreign key value in the created_by
SQL> --   column to find the row where the primary key value was copied
SQL> --   from and return the system_user_name for the same row. It is
SQL> --   called a recursive or self-referencing join. Table aliases are
SQL> --   primary designed to let you reference multiple copies of the
SQL> --   same table in a single join; and to disambiguate columns returned
SQL> --   from different tables or copies of tables in the SELECT-list.
SQL> --
SQL> --   Column aliases let you apply different formatting masks to values
SQL> --   from a query where the column names are the same. While the table
SQL> --   aliases disambiguates the two column sets, only column aliases
SQL> --   let you define the difference in SQL reporting or query results.
SQL> --   Using distinct column aliases for dulplicated column names is the
SQL> --   best practice; although, some progammers use positional alignment
SQL> --   for this purpuse. Positional programs eventually fail because
SQL> --   maintenance programmers may overlook the coupling of position in
SQL> --   the prior solution.
SQL> --
SQL> --   HINT: Please note the suggested column aliases in the formatting
SQL> -- 	statements below.
SQL> --
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: The following header for displaying the data.
SQL> --
SQL> --  COL system_user_id1	 FORMAT 9999  HEADING "System User|ID #"
SQL> --  COL system_user_name1	 FORMAT A12   HEADING "System User|Name"
SQL> --  COL system_user_id2	 FORMAT 9999  HEADING "Created By|System User|ID #"
SQL> --  COL system_user_name2	 FORMAT A12   HEADING "Created By|System User|Name"
SQL> -- ----------------------------------------------------------------------
SQL> --  Anticipated Results
SQL> -- ----------------------------------------------------------------------
SQL> -- 			    Created By Created By
SQL> --   System User System User  System User System User
SQL> -- 	 ID # Name		  ID # Name
SQL> --   ----------- ------------ ----------- ------------
SQL> -- 	 1001 DBA1		     1 SYSADMIN
SQL> --
SQL> --   1 row selected.
SQL> -- ======================================================================
SQL> COL system_user_id1     FORMAT 9999  HEADING "System User|ID #"
SQL> COL system_user_name1   FORMAT A12   HEADING "System User|Name"
SQL> COL system_user_id2     FORMAT 9999  HEADING "Created By|System User|ID #"
SQL> COL system_user_name2   FORMAT A12   HEADING "Created By|System User|Name"
SQL> select su1.system_user_id, su1.system_user_name, su2.created_by as system_user_id2, su2.system_user_name as system_user_name2
  2  from system_user su1 join system_user su2 on su1.created_by = su2.system_user_id
  3  where su1.system_user_name = 'DBA1';

                          Created By Created By                                 
System User System User  System User System User                                
       ID # Name                ID # Name                                       
----------- ------------ ----------- ------------                               
       1001 DBA1                   1 SYSADMIN                                   

1 row selected.

SQL> 
SQL> 
SQL> 
SQL> -- ======================================================================
SQL> --  Step #4
SQL> --  -------
SQL> --   Write a query that returns the system_user_id and system_user_name
SQL> --   columns from one copy of the system_user table by using an 'su1'
SQL> --   alias, the system_user_name from a second copy of the system_user
SQL> --   table by using an 'su2' alias, and the system_user_name from a
SQL> --   third copy of the system_user table by using an 'su3' alias. You
SQL> --   should join the three copies by doing the following:
SQL> --
SQL> --     - Find the row of the 'su1' aliased table where the
SQL> --       system_user_name is 'DBA1'.
SQL> --     - Join the copy of the system_user table with an alias of 'su1'
SQL> --       to the other copy of the system_user table with an alias of 'su2'
SQL> --     - Find the row of the 'su2' aliased table in the result set
SQL> --       from the join of the two tables where the system_user_name
SQL> --       is 'DBA1'.
SQL> --     - Join the result set of the two table join to the third copy
SQL> --       of the system_user table with an alias of 'su3' by joining
SQL> --       the su1.last_updated_by column and su3.system_user_id.
SQL> --
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: This does use a WHERE clause.
SQL> -- ----------------------------------------------------------------------
SQL> --  Purpose:
SQL> --  --------
SQL> --   This type of join uses the foreign key value in the last_updated_by
SQL> --   column to find the row where the primary key value was copied
SQL> --   from and return the system_user_name for the same row. It is also
SQL> --   called a recursive or self-referencing join.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: The following header for displaying the data.
SQL> --
SQL> --  COL system_user_id1	 FORMAT 9999  HEADING "System User|ID #"
SQL> --  COL system_user_name1	 FORMAT A12   HEADING "System User|Name"
SQL> --  COL system_user_id2	 FORMAT 9999  HEADING "Created By|System User|ID #"
SQL> --  COL system_user_name2	 FORMAT A12   HEADING "Created By|System User|Name"
SQL> --  COL system_user_id3	 FORMAT 9999  HEADING "Last|Updated By|System User|ID #"
SQL> --  COL system_user_name3	 FORMAT A12   HEADING "Last|Updated By|System User|Name"
SQL> -- ----------------------------------------------------------------------
SQL> --  Anticipated Results
SQL> -- ----------------------------------------------------------------------
SQL> -- 							   Last Last
SQL> -- 			    Created By Created By    Updated By Updated By
SQL> --   System User System User  System User System User  System User System User
SQL> -- 	 ID # Name		  ID # Name		   ID # Name
SQL> --   ----------- ------------ ----------- ------------ ----------- ------------
SQL> -- 	 1001 DBA1		     1 SYSADMIN 	      1 SYSADMIN
SQL> --
SQL> --   1 row selected.
SQL> -- ======================================================================
SQL> COL system_user_id1     FORMAT 9999  HEADING "System User|ID #"
SQL> COL system_user_name1   FORMAT A12   HEADING "System User|Name"
SQL> COL system_user_id2     FORMAT 9999  HEADING "Created By|System User|ID #"
SQL> COL system_user_name2   FORMAT A12   HEADING "Created By|System User|Name"
SQL> COL system_user_id3     FORMAT 9999  HEADING "Last|Updated By|System User|ID #"
SQL> COL system_user_name3   FORMAT A12   HEADING "Last|Updated By|System User|Name"
SQL> select su1.system_user_id, su1.system_user_name, su2.created_by as system_user_id2, su2.system_user_name as system_user_name2, su3.system_user_id as system_user_id3, su3.system_user_name as system_user_name3
  2  from system_user su1
  3  join system_user su2 on su1.created_by = su2.system_user_id
  4  join system_user su3 on su1.last_updated_by = su3.system_user_id
  5  where su1.system_user_name = 'DBA1';

                                                         Last Last              
                          Created By Created By    Updated By Updated By        
System User System User  System User System User  System User System User       
       ID # Name                ID # Name                ID # Name              
----------- ------------ ----------- ------------ ----------- ------------      
       1001 DBA1                   1 SYSADMIN               1 SYSADMIN          

1 row selected.

SQL> 
SQL> -- ======================================================================
SQL> --  Step #5
SQL> --  -------
SQL> --   Use the answer to Task #1, Step #1 to UPDATE the last_updated_by
SQL> --   column for the row in the system_user table where you find the
SQL> --   system_user_name is equal to 'DBA2'. The subquery should use a
SQL> --   system_user_name equal to 'DBA1'. The generic format of the
SQL> --   update statement is:
SQL> --
SQL> --     UPDATE table_name
SQL> --     SET    column_name = ( scalar_subquery )
SQL> --     WHERE  column_name = 'some_value';
SQL> --
SQL> --   Copy the first update statement, then change the target column
SQL> --   to the created_by column where the system_user_name is equal to
SQL> --   'DBA2'.
SQL> --
SQL> --   Use your query from Task #1, Step #4 to query the whole set of
SQL> --   rows from the system_user table by removing the WHERE clause and
SQL> --   adding an ORDER BY clause on the system_user_id column.
SQL> --
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: This does use a WHERE clause.
SQL> -- ----------------------------------------------------------------------
SQL> --  Purpose:
SQL> --  --------
SQL> --   This type of join uses the foreign key value in the last_updated_by
SQL> --   column to find the row where the primary key value was copied
SQL> --   from and return the system_user_name for the same row. It is also
SQL> --   called a recursive or self-referencing join.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: The following header for displaying the data.
SQL> --
SQL> --  COL system_user_id1	 FORMAT 9999  HEADING "System User|ID #"
SQL> --  COL system_user_name1	 FORMAT A12   HEADING "System User|Name"
SQL> --  COL system_user_id2	 FORMAT 9999  HEADING "Created By|System User|ID #"
SQL> --  COL system_user_name2	 FORMAT A12   HEADING "Created By|System User|Name"
SQL> --  COL system_user_id3	 FORMAT 9999  HEADING "Last|Updated By|System User|ID #"
SQL> --  COL system_user_name3	 FORMAT A12   HEADING "Last|Updated By|System User|Name"
SQL> -- ----------------------------------------------------------------------
SQL> --  Anticipated Results
SQL> -- ----------------------------------------------------------------------
SQL> -- 							   Last Last
SQL> -- 			    Created By Created By    Updated By Updated By
SQL> --   System User System User  System User System User  System User System User
SQL> -- 	 ID # Name		  ID # Name		   ID # Name
SQL> --   ---------- ------------ ----------- ------------ ----------- ------------
SQL> -- 	    1 SYSADMIN		     1 SYSADMIN 	      1 SYSADMIN
SQL> -- 	 1001 DBA1		     1 SYSADMIN 	      1 SYSADMIN
SQL> -- 	 1002 DBA2		  1001 DBA1		   1001 DBA1
SQL> --   3 rows selected.
SQL> -- ======================================================================
SQL> 
SQL> 
SQL> UPDATE system_user
  2  SET  created_by = (select system_user_id
  3  from system_user
  4  where system_user_name = 'DBA1' )
  5  WHERE  system_user_name = 'DBA2';

1 row updated.

SQL> 
SQL> UPDATE system_user
  2  SET    last_updated_by = (select system_user_id
  3  from system_user
  4  where system_user_name = 'DBA1' )
  5  WHERE  system_user_name = 'DBA2';

1 row updated.

SQL> 
SQL> 
SQL> COL system_user_id1     FORMAT 9999  HEADING "System User|ID #"
SQL> COL system_user_name1   FORMAT A12   HEADING "System User|Name"
SQL> COL system_user_id2     FORMAT 9999  HEADING "Created By|System User|ID #"
SQL> COL system_user_name2   FORMAT A12   HEADING "Created By|System User|Name"
SQL> COL system_user_id3     FORMAT 9999  HEADING "Last|Updated By|System User|ID #"
SQL> COL system_user_name3   FORMAT A12   HEADING "Last|Updated By|System User|Name"
SQL> select su1.system_user_id, su1.system_user_name, su2.created_by as system_user_id2, su2.system_user_name as system_user_name2, su3.system_user_id as system_user_id3, su3.system_user_name as system_user_name3
  2  from system_user su1
  3  join system_user su2 on su1.created_by = su2.system_user_id
  4  join system_user su3 on su1.last_updated_by = su3.system_user_id
  5  order by su1.system_user_id
  6  ;

                                                         Last Last              
                          Created By Created By    Updated By Updated By        
System User System User  System User System User  System User System User       
       ID # Name                ID # Name                ID # Name              
----------- ------------ ----------- ------------ ----------- ------------      
          1 SYSADMIN               1 SYSADMIN               1 SYSADMIN          
       1001 DBA1                   1 SYSADMIN               1 SYSADMIN          
       1002 DBA2                   1 DBA1                1001 DBA1              

3 rows selected.

SQL> -- ======================================================================
SQL> --  Task #2
SQL> --  -------
SQL> --   Reviewing the Entity Relationship Model (ER-Model) or Entity
SQL> --   Relationship Design (ERD), you noticed that the item table has
SQL> --   repetitive data in the item_rating column. You see data that
SQL> --   supports movies and games, and recognize that you need two new
SQL> --   tables. You will be able to build some of the logic with queries
SQL> --   and use Data Definition Language (DDL) commands to build the
SQL> --   new tables and constraints.
SQL> -- ======================================================================
SQL> --  Step #1
SQL> --  -------
SQL> --   Create a rating_agency table with the following data column names
SQL> --   and types (check the scripts in the create library directory).
SQL> --   There is also hidden a primary key, a unique, five not null,
SQL> --   and two foreign key constraints. The validation scripts will
SQL> --   generate the displayed values when you are creating the
SQL> --   rating_agency table correctly:
SQL> --
SQL> --    Name 			   Null?    Type
SQL> --    ------------------------------- -------- -----------------------
SQL> --    RATING_AGENCY_ID		   NOT NULL NUMBER
SQL> --    RATING_AGENCY_ABBR		   NOT NULL VARCHAR2(4)
SQL> --    RATING_AGENCY_NAME		   NOT NULL VARCHAR2(40)
SQL> --    CREATED_BY			   NOT NULL NUMBER
SQL> --    CREATION_DATE		   NOT NULL DATE
SQL> --    LAST_UPDATED_BY		   NOT NULL NUMBER
SQL> --    LAST_UPDATE_DATE		   NOT NULL DATE
SQL> --
SQL> --   After you create the table with the appropriate constraints, you
SQL> --   should create a rating_s1 sequence.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: This uses the CREATE and INSERT statements.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: This step uses a series of diagnostics for verify that you
SQL> --        have correctly completed each step.
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Create and assign bind variable for rating_agency table and
SQL> --  sequence name; and this will set a default session variable to
SQL> --  ensure diagnostic scripts run consistently.
SQL> -- ------------------------------------------------------------------
SQL> 
SQL> VARIABLE table_name     VARCHAR2(30)
SQL> 
SQL> BEGIN
  2    :table_name := UPPER('rating_agency');
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> 
SQL> --  Verify table name.
SQL> SELECT :table_name FROM dual;

:TABLE_NAME                                                                     
--------------------------------                                                
RATING_AGENCY                                                                   

1 row selected.

SQL> 
SQL> -- ------------------------------------------------------------------
SQL> --  Conditionally drop rating_agency table and rating_agency_s1
SQL> --  sequence.
SQL> -- ------------------------------------------------------------------
SQL> DECLARE
  2    /* Dynamic cursor. */
  3    CURSOR c (cv_object_name VARCHAR2) IS
  4  	 SELECT o.object_type
  5  	 ,	o.object_name
  6  	 FROM	user_objects o
  7  	 WHERE	o.object_name LIKE UPPER(cv_object_name||'%');
  8  BEGIN
  9    FOR i IN c(:table_name) LOOP
 10  	 IF i.object_type = 'SEQUENCE' THEN
 11  	   EXECUTE IMMEDIATE 'DROP '||i.object_type||' '||i.object_name;
 12  	 ELSIF i.object_type = 'TABLE' THEN
 13  	   EXECUTE IMMEDIATE 'DROP '||i.object_type||' '||i.object_name||' CASCADE CONSTRAINTS';
 14  	 END IF;
 15    END LOOP;
 16  END;
 17  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Enter the CREATE statement for the rating_agency table here:
SQL> -- ======================================================================
SQL> CREATE TABLE rating_agency
  2  ( RATING_AGENCY_ID 	 NUMBER
  3  ,RATING_AGENCY_ABBR	 VARCHAR2(4) CONSTRAINT NN_RATING_AGENCY1 NOT NULL
  4  ,RATING_AGENCY_NAME	 VARCHAR2(40)CONSTRAINT NN_RATING_AGENCY2 NOT NULL
  5  ,CREATED_BY		 NUMBER      CONSTRAINT NN_RATING_AGENCY3 NOT NULL
  6  ,CREATION_DATE		 DATE	     CONSTRAINT NN_RATING_AGENCY4 NOT NULL
  7  ,LAST_UPDATED_BY		 NUMBER      CONSTRAINT NN_RATING_AGENCY5 NOT NULL
  8  ,LAST_UPDATE_DATE		 DATE	     CONSTRAINT NN_RATING_AGENCY6 NOT NULL
  9  , CONSTRAINT pk_rating_agency PRIMARY KEY(rating_agency_id)
 10  , CONSTRAINT fk_rating_agency1 FOREIGN KEY(created_by) REFERENCES system_user(system_user_id)
 11  , CONSTRAINT fk_rating_agency2 FOREIGN KEY(last_updated_by) REFERENCES system_user(system_user_id)
 12  , CONSTRAINT uq_rating_agency UNIQUE (rating_agency_name)
 13  );

Table created.

SQL> 
SQL> 
SQL> --   -------------------- -------- ----------------------
SQL> --   PK_RATING_AGENCY	      1 RATING_AGENCY_ID
SQL> --   UQ_RATING_AGENCY	      1 RATING_AGENCY_NAME
SQL> 
SQL> 
SQL> -- ======================================================================
SQL> --  Validate the columns, data types, and not null constraints.
SQL> -- ------------------------------------------------------------------
SQL> 
SQL> COLUMN table_name	FORMAT A16  HEADING "Table Name"
SQL> COLUMN column_id	FORMAT 9999 HEADING "Column|ID #"
SQL> COLUMN column_name FORMAT A24  HEADING "Column Name"
SQL> COLUMN nullable	FORMAT A8   HEADING "Nullable"
SQL> COLUMN data_type	FORMAT A14  HEADING "Data Type"
SQL> SELECT   table_name
  2  ,	      column_id
  3  ,	      column_name
  4  ,	      CASE
  5  		WHEN nullable = 'N' THEN 'NOT NULL'
  6  		ELSE ' '
  7  	      END AS nullable
  8  ,	      CASE
  9  		WHEN data_type IN ('CHAR','VARCHAR2','NUMBER') THEN
 10  		  data_type||'('||data_length||')'
 11  		ELSE
 12  		  data_type
 13  	      END AS data_type
 14  FROM     user_tab_columns
 15  WHERE    table_name = :table_name
 16  ORDER BY 2;

                 Column                                                         
Table Name         ID # Column Name              Nullable Data Type             
---------------- ------ ------------------------ -------- --------------        
RATING_AGENCY         1 RATING_AGENCY_ID         NOT NULL NUMBER(22)            
RATING_AGENCY         2 RATING_AGENCY_ABBR       NOT NULL VARCHAR2(4)           
RATING_AGENCY         3 RATING_AGENCY_NAME       NOT NULL VARCHAR2(40)          
RATING_AGENCY         4 CREATED_BY               NOT NULL NUMBER(22)            
RATING_AGENCY         5 CREATION_DATE            NOT NULL DATE                  
RATING_AGENCY         6 LAST_UPDATED_BY          NOT NULL NUMBER(22)            
RATING_AGENCY         7 LAST_UPDATE_DATE         NOT NULL DATE                  

7 rows selected.

SQL> 
SQL> -- ------------------------------------------------------------------
SQL> --  It should display the following:
SQL> -- ------------------------------------------------------------------
SQL> --
SQL> --   TABLE_NAME	   COLUMN_ID COLUMN_NAME	    NULLABLE DATA_TYPE
SQL> --   ---------------- --------- ---------------------- -------- ------------
SQL> --   RATING_AGENCY 	   1 RATING_AGENCY_ID	    NOT NULL NUMBER(22)
SQL> --   RATING_AGENCY 	   2 RATING_AGENCY_ABBR     NOT NULL VARCHAR2(4)
SQL> --   RATING_AGENCY 	   3 RATING_AGENCY_NAME     NOT NULL VARCHAR2(40)
SQL> --   RATING_AGENCY 	   4 CREATED_BY 	    NOT NULL NUMBER(22)
SQL> --   RATING_AGENCY 	   5 CREATION_DATE	    NOT NULL DATE
SQL> --   RATING_AGENCY 	   6 LAST_UPDATED_BY	    NOT NULL NUMBER(22)
SQL> --   RATING_AGENCY 	   7 LAST_UPDATE_DATE	    NOT NULL DATE
SQL> --
SQL> --   7 rows selected.
SQL> --
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Validate the primary and non-unique contraints.
SQL> -- ------------------------------------------------------------------
SQL> 
SQL> COLUMN constraint_name   FORMAT A22
SQL> COLUMN search_condition  FORMAT A36
SQL> COLUMN constraint_type   FORMAT A1
SQL> SELECT   uc.constraint_name
  2  ,	      uc.search_condition
  3  ,	      uc.constraint_type
  4  FROM     user_constraints uc INNER JOIN user_cons_columns ucc
  5  ON       uc.table_name = ucc.table_name
  6  AND      uc.constraint_name = ucc.constraint_name
  7  WHERE    uc.table_name = :table_name
  8  AND      uc.constraint_type IN (UPPER('c'),UPPER('p'))
  9  ORDER BY uc.constraint_type DESC
 10  ,	      uc.constraint_name;

Constraint Name        SEARCH_CONDITION                     C                   
---------------------- ------------------------------------ -                   
PK_RATING_AGENCY       <Null>                               P                   
NN_RATING_AGENCY1      "RATING_AGENCY_ABBR" IS NOT NULL     C                   
NN_RATING_AGENCY2      "RATING_AGENCY_NAME" IS NOT NULL     C                   
NN_RATING_AGENCY3      "CREATED_BY" IS NOT NULL             C                   
NN_RATING_AGENCY4      "CREATION_DATE" IS NOT NULL          C                   
NN_RATING_AGENCY5      "LAST_UPDATED_BY" IS NOT NULL        C                   
NN_RATING_AGENCY6      "LAST_UPDATE_DATE" IS NOT NULL       C                   

7 rows selected.

SQL> 
SQL> -- ------------------------------------------------------------------
SQL> --  It should display the following:
SQL> -- ------------------------------------------------------------------
SQL> --
SQL> --   CONSTRAINT_NAME		 SEARCH_CONDITION		      C
SQL> --   ------------------------------ ------------------------------------ -
SQL> --   PK_RATING_AGENCY						      P
SQL> --   NN_RATING_AGENCY1		 "RATING_AGENCY_ABBR" IS NOT NULL     C
SQL> --   NN_RATING_AGENCY2		 "RATING_AGENCY_NAME" IS NOT NULL     C
SQL> --   NN_RATING_AGENCY3		 "CREATED_BY" IS NOT NULL	      C
SQL> --   NN_RATING_AGENCY4		 "CREATION_DATE" IS NOT NULL	      C
SQL> --   NN_RATING_AGENCY5		 "LAST_UPDATED_BY" IS NOT NULL	      C
SQL> --   NN_RATING_AGENCY6		 "LAST_UPDATE_DATE" IS NOT NULL       C
SQL> --
SQL> --   7 rows selected.
SQL> --
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Validate the foreign keys.
SQL> -- ------------------------------------------------------------------
SQL> 
SQL> -- Display foreign key constraints.
SQL> COL constraint_source FORMAT A38 HEADING "Constraint Name:| Table.Column"
SQL> COL references_column FORMAT A40 HEADING "References:| Table.Column"
SQL> SELECT   uc.constraint_name||CHR(10)
  2  ||      '('||ucc1.table_name||'.'||ucc1.column_name||')' constraint_source
  3  ,	     'REFERENCES'||CHR(10)
  4  ||      '('||ucc2.table_name||'.'||ucc2.column_name||')' references_column
  5  FROM     user_constraints uc
  6  ,	      user_cons_columns ucc1
  7  ,	      user_cons_columns ucc2
  8  WHERE    uc.constraint_name = ucc1.constraint_name
  9  AND      uc.r_constraint_name = ucc2.constraint_name
 10  AND      ucc1.position = ucc2.position -- Correction for multiple column primary keys.
 11  AND      uc.constraint_type = 'R'
 12  AND      ucc1.table_name = :table_name
 13  ORDER BY ucc1.table_name
 14  ,	      uc.constraint_name;

Constraint Name:                       References:                              
 Table.Column                           Table.Column                            
-------------------------------------- ---------------------------------------- 
FK_RATING_AGENCY1                      REFERENCES                               
(RATING_AGENCY.CREATED_BY)             (SYSTEM_USER.SYSTEM_USER_ID)             
                                                                                
FK_RATING_AGENCY2                      REFERENCES                               
(RATING_AGENCY.LAST_UPDATED_BY)        (SYSTEM_USER.SYSTEM_USER_ID)             
                                                                                

2 rows selected.

SQL> 
SQL> -- ------------------------------------------------------------------
SQL> --  It should display the following:
SQL> -- ------------------------------------------------------------------
SQL> --
SQL> --   Constraint Name:			 References:
SQL> --    Table.Column 			  Table.Column
SQL> --   -------------------------------------- ----------------------------------------
SQL> --   FK_RATING_AGENCY1			 REFERENCES
SQL> --   (RATING_AGENCY.CREATED_BY)		 (SYSTEM_USER.SYSTEM_USER_ID)
SQL> --
SQL> --   FK_RATING_AGENCY2			 REFERENCES
SQL> --   (RATING_AGENCY.LAST_UPDATED_BY)	 (SYSTEM_USER.SYSTEM_USER_ID)
SQL> --
SQL> --   2 rows selected.
SQL> --
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Validate the primary and unique constraint.
SQL> -- ------------------------------------------------------------------
SQL> 
SQL> COLUMN index_name	    FORMAT A20 HEADING "Unique Indexes Names"
SQL> COLUMN column_position FORMAT 999 HEADING "Column|Position"
SQL> COLUMN column_name     FORMAT A22 HEADING "Column|Name"
SQL> SELECT   ui.index_name
  2  ,	      uic.column_position
  3  ,	      uic.column_name
  4  FROM     user_indexes ui INNER JOIN user_ind_columns uic
  5  ON       ui.index_name = uic.index_name
  6  AND      ui.table_name = uic.table_name
  7  WHERE    ui.table_name = :table_name;

                       Column Column                                            
Unique Indexes Names Position Name                                              
-------------------- -------- ----------------------                            
PK_RATING_AGENCY            1 RATING_AGENCY_ID                                  
UQ_RATING_AGENCY            1 RATING_AGENCY_NAME                                

2 rows selected.

SQL> 
SQL> -- ------------------------------------------------------------------
SQL> --  It should display the following:
SQL> -- ------------------------------------------------------------------
SQL> --
SQL> -- 			 Column Column
SQL> --   Unique Indexes Names Position Name
SQL> --   -------------------- -------- ----------------------
SQL> --   PK_RATING_AGENCY	      1 RATING_AGENCY_ID
SQL> --   UQ_RATING_AGENCY	      1 RATING_AGENCY_NAME
SQL> --
SQL> --   2 rows selected.
SQL> --
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Enter the CREATE statement for the rating_agency_s1 sequence that
SQL> --  starts with 1001 here:
SQL> -- ======================================================================
SQL> 
SQL> CREATE SEQUENCE rating_agency_s1
  2   START WITH     1001;

Sequence created.

SQL> 
SQL> 
SQL> -- ======================================================================
SQL> --  Validate the creation of the correct sequence.
SQL> -- ------------------------------------------------------------------
SQL> 
SQL> COLUMN sequence_name FORMAT A20 HEADING "Sequence Name"
SQL> SELECT   sequence_name
  2  FROM     user_sequences
  3  WHERE    sequence_name = :table_name||'_S1';

Sequence Name                                                                   
--------------------                                                            
RATING_AGENCY_S1                                                                

1 row selected.

SQL> 
SQL> -- ------------------------------------------------------------------
SQL> --  It should display the following:
SQL> -- ------------------------------------------------------------------
SQL> --
SQL> --  Sequence Name
SQL> --  --------------------
SQL> --  RATING_AGENCY_S1
SQL> --
SQL> --  1 row selected.
SQL> --
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --   Insert two rows into the rating_agency table with the following
SQL> --   information for the columns:
SQL> --
SQL> --   Row #1:
SQL> --   -------
SQL> --   RATING_AGENCY_ID ............  rating_agency_s1.NEXTVAL
SQL> --   RATING_AGENCY_ABBR .......... 'ESRB'
SQL> --   RATING_AGENCY_NAME .......... 'Entertainment Software Rating Board'
SQL> --   CREATED_BY ..................  Scalar subquery where system_user_name
SQL> -- 				 is equal to 'DBA2'
SQL> --   CREATION_DATE ...............  SYSDATE
SQL> --   LAST_UPDATED_BY  ............  Scalar subquery where system_user_name
SQL> -- 				 is equal to 'DBA2'
SQL> --   LAST_UPDATE_DATE ............  SYSDATE
SQL> --
SQL> --   Row #2:
SQL> --   -------
SQL> --   RATING_AGENCY_ID ............  rating_agency_s1.NEXTVAL
SQL> --   RATING_AGENCY_ABBR .......... 'MPAA'
SQL> --   RATING_AGENCY_NAME .......... 'Motion Picture Association of America'
SQL> --   CREATED_BY ..................  Scalar subquery where system_user_name
SQL> -- 				 is equal to 'DBA2'
SQL> --   CREATION_DATE ...............  SYSDATE
SQL> --   LAST_UPDATED_BY  ............  Scalar subquery where system_user_name
SQL> -- 				 is equal to 'DBA2'
SQL> --   LAST_UPDATE_DATE ............  SYSDATE
SQL> --
SQL> -- ------------------------------------------------------------------
SQL> --  The INSERT statement has the following protoype:
SQL> -- ------------------------------------------------------------------
SQL> --
SQL> --    INSERT INTO table_name
SQL> --    ( comma-separated column_name_list )
SQL> --    VALUES
SQL> --    ( comma-separated value_list );
SQL> --
SQL> --    HINT: You can substitute scalar queries for values in the
SQL> -- 	 value list of an INSERT statement.
SQL> --
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Enter the INSERT statements here:
SQL> -- ======================================================================
SQL> insert into rating_agency
  2  (RATING_AGENCY_ID
  3  ,RATING_AGENCY_ABBR
  4  ,RATING_AGENCY_NAME
  5  ,CREATED_BY
  6  ,CREATION_DATE
  7  ,LAST_UPDATED_BY
  8  ,LAST_UPDATE_DATE)
  9  values(
 10  rating_agency_s1.NEXTVAL,
 11  'ESRB',
 12  'Entertainment Software Rating Board',
 13  (select system_user_id
 14  from system_user
 15  where system_user_name = 'DBA2'),
 16  SYSDATE,
 17  (select system_user_id
 18  from system_user
 19  where system_user_name = 'DBA2'),
 20  SYSDATE);

1 row created.

SQL> 
SQL> 
SQL> insert into rating_agency
  2  (RATING_AGENCY_ID
  3  ,RATING_AGENCY_ABBR
  4  ,RATING_AGENCY_NAME
  5  ,CREATED_BY
  6  ,CREATION_DATE
  7  ,LAST_UPDATED_BY
  8  ,LAST_UPDATE_DATE)
  9  values(
 10  rating_agency_s1.NEXTVAL,
 11  'MPAA',
 12  'Motion Picture Association of America',
 13  (select system_user_id
 14  from system_user
 15  where system_user_name = 'DBA2'),
 16  SYSDATE,
 17  (select system_user_id
 18  from system_user
 19  where system_user_name = 'DBA2'),
 20  SYSDATE);

1 row created.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> 
SQL> -- ======================================================================
SQL> --  Validate the insertion of the two rows with the following query:
SQL> -- ------------------------------------------------------------------
SQL> 
SQL> COL rating_agency_id    FORMAT 9999  HEADING "Rating|Agency|ID #"
SQL> COL rating_agency_abbr  FORMAT A6	  HEADING "Rating|Agency|Abbr"
SQL> COL rating_agency_name  FORMAT A40   HEADING "Rating Agency"
SQL> SELECT   rating_agency_id
  2  ,	      rating_agency_abbr
  3  ,	      rating_agency_name
  4  FROM     rating_agency;

Rating Rating                                                                   
Agency Agency                                                                   
  ID # Abbr   Rating Agency                                                     
------ ------ ----------------------------------------                          
  1001 ESRB   Entertainment Software Rating Board                               
  1002 MPAA   Motion Picture Association of America                             

2 rows selected.

SQL> 
SQL> -- ------------------------------------------------------------------
SQL> --  It should display the following:
SQL> -- ------------------------------------------------------------------
SQL> --
SQL> --   Rating Rating
SQL> --   Agency Agency
SQL> --     ID # Abbr	Rating Agency
SQL> --   ------ ------ ----------------------------------------
SQL> --     1001 ESRB	Entertainment Software Rating Board
SQL> --     1002 MPAA	Motion Picture Association of America
SQL> --
SQL> --   2 rows selected.
SQL> 
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Step #2
SQL> --  -------
SQL> --   Create a rating table with the following data column names and
SQL> --   types (check the scripts in the create library directory for
SQL> --   examples). There is also hidden a primary key, a unique, five
SQL> --   not null, and two foreign key constraints. The validation
SQL> --   scripts will generate the displayed values when you are creating
SQL> --   the rating table correctly:
SQL> --
SQL> --    Name 			   Null?    Type
SQL> --    ------------------------------- -------- ----------------------------
SQL> --    RATING_ID			   NOT NULL NUMBER
SQL> --    RATING_AGENCY_ID		   NOT NULL NUMBER
SQL> --    RATING			   NOT NULL VARCHAR2(5)
SQL> --    DESCRIPTION				    VARCHAR2(400)
SQL> --    CREATED_BY			   NOT NULL NUMBER
SQL> --    CREATION_DATE		   NOT NULL DATE
SQL> --    LAST_UPDATED_BY		   NOT NULL NUMBER
SQL> --    LAST_UPDATE_DATE		   NOT NULL DATE
SQL> --
SQL> --   After you create the table with the appropriate constraints, you
SQL> --   should create a rating_s1 sequence.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: This uses the CREATE and INSERT statements.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: This step uses a series of diagnostics for verify that you
SQL> --        have correctly completed each step.
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Assign bind variable for rating table and
SQL> --  sequence name; and this will set a default session variable to
SQL> --  ensure diagnostic scripts run consistently.
SQL> -- ------------------------------------------------------------------
SQL> 
SQL> BEGIN
  2    :table_name := UPPER('rating');
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> 
SQL> --  Verify table name.
SQL> SELECT :table_name FROM dual;

:TABLE_NAME                                                                     
--------------------------------                                                
RATING                                                                          

1 row selected.

SQL> 
SQL> -- ------------------------------------------------------------------
SQL> --  Conditionally drop rating table and rating_s1
SQL> --  sequence.
SQL> -- ------------------------------------------------------------------
SQL> DECLARE
  2    /* Dynamic cursor. */
  3    CURSOR c (cv_object_name VARCHAR2) IS
  4  	 SELECT o.object_type
  5  	 ,	o.object_name
  6  	 FROM	user_objects o
  7  	 WHERE	o.object_name LIKE UPPER('rating') and o.object_name like UPPER('rating_s1');
  8  BEGIN
  9    FOR i IN c(:table_name) LOOP
 10  	 IF i.object_type = 'SEQUENCE' THEN
 11  	   EXECUTE IMMEDIATE 'DROP '||i.object_type||' '||i.object_name;
 12  	 ELSIF i.object_type = 'TABLE' THEN
 13  	   EXECUTE IMMEDIATE 'DROP '||i.object_type||' '||i.object_name||' CASCADE CONSTRAINTS';
 14  	 END IF;
 15    END LOOP;
 16  END;
 17  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Enter the CREATE statement for the rating table here:
SQL> -- ======================================================================
SQL> 
SQL> CREATE TABLE rating
  2  ( RATING_ID	  NUMBER
  3  ,RATING_AGENCY_ID		 NUMBER 	 CONSTRAINT NN_RATING_1 NOT NULL
  4  ,RATING			 VARCHAR2(8)	 CONSTRAINT NN_RATING_2 NOT NULL constraint UQ_RATING unique
  5  ,DESCRIPTION		 VARCHAR2(400)
  6  ,CREATED_BY		 NUMBER 	 CONSTRAINT NN_RATING_3 NOT NULL
  7  ,CREATION_DATE		 DATE		 CONSTRAINT NN_RATING_4 NOT NULL
  8  ,LAST_UPDATED_BY		 NUMBER 	 CONSTRAINT NN_RATING_5 NOT NULL
  9  ,LAST_UPDATE_DATE		 DATE		 CONSTRAINT NN_RATING_6 NOT NULL
 10  , CONSTRAINT pk_rating PRIMARY KEY(rating_id)
 11  , CONSTRAINT fk_rating_1 FOREIGN KEY(rating_agency_id) REFERENCES rating_agency(rating_agency_id)
 12  , CONSTRAINT fk_rating_2 FOREIGN KEY(created_by) REFERENCES system_user(system_user_id)
 13  , CONSTRAINT fk_rating_3 foreign key (last_updated_by) references system_user(system_user_id)
 14  );

Table created.

SQL> 
SQL> --
SQL> --    Name 			   Null?    Type
SQL> --    ------------------------------- -------- ----------------------------
SQL> --    RATING_ID			   NOT NULL NUMBER
SQL> --    RATING_AGENCY_ID		   NOT NULL NUMBER
SQL> --    RATING			   NOT NULL VARCHAR2(5)
SQL> --    DESCRIPTION				    VARCHAR2(400)
SQL> --    CREATED_BY			   NOT NULL NUMBER
SQL> --    CREATION_DATE		   NOT NULL DATE
SQL> --    LAST_UPDATED_BY		   NOT NULL NUMBER
SQL> --    LAST_UPDATE_DATE		   NOT NULL DATE
SQL> 
SQL> -- ======================================================================
SQL> --  Validate the columns, data types, and not null constraints.
SQL> -- ------------------------------------------------------------------
SQL> 
SQL> COLUMN table_name	FORMAT A16  HEADING "Table Name"
SQL> COLUMN column_id	FORMAT 9999 HEADING "Column|ID #"
SQL> COLUMN column_name FORMAT A24  HEADING "Column Name"
SQL> COLUMN nullable	FORMAT A8   HEADING "Nullable"
SQL> COLUMN data_type	FORMAT A14  HEADING "Data Type"
SQL> SELECT   table_name
  2  ,	      column_id
  3  ,	      column_name
  4  ,	      CASE
  5  		WHEN nullable = 'N' THEN 'NOT NULL'
  6  		ELSE ''
  7  	      END AS nullable
  8  ,	      CASE
  9  		WHEN data_type IN ('CHAR','VARCHAR2','NUMBER') THEN
 10  		  data_type||'('||data_length||')'
 11  		ELSE
 12  		  data_type
 13  	      END AS data_type
 14  FROM     user_tab_columns
 15  WHERE    table_name = :table_name
 16  ORDER BY 2;

                 Column                                                         
Table Name         ID # Column Name              Nullable Data Type             
---------------- ------ ------------------------ -------- --------------        
RATING                1 RATING_ID                NOT NULL NUMBER(22)            
RATING                2 RATING_AGENCY_ID         NOT NULL NUMBER(22)            
RATING                3 RATING                   NOT NULL VARCHAR2(8)           
RATING                4 DESCRIPTION              <Null>   VARCHAR2(400)         
RATING                5 CREATED_BY               NOT NULL NUMBER(22)            
RATING                6 CREATION_DATE            NOT NULL DATE                  
RATING                7 LAST_UPDATED_BY          NOT NULL NUMBER(22)            
RATING                8 LAST_UPDATE_DATE         NOT NULL DATE                  

8 rows selected.

SQL> 
SQL> -- ------------------------------------------------------------------
SQL> --  It should display the following:
SQL> -- ------------------------------------------------------------------
SQL> --
SQL> -- 		   Column
SQL> --   Table Name	     ID # Column Name		   Nullable Data Type
SQL> --   ---------------- ------ ------------------------ -------- --------------
SQL> --   RATING		1 RATING_ID		   NOT NULL NUMBER(22)
SQL> --   RATING		2 RATING_AGENCY_ID	   NOT NULL NUMBER(22)
SQL> --   RATING		3 RATING		   NOT NULL VARCHAR2(8)
SQL> --   RATING		4 DESCRIPTION			    VARCHAR2(400)
SQL> --   RATING		5 CREATED_BY		   NOT NULL NUMBER(22)
SQL> --   RATING		6 CREATION_DATE 	   NOT NULL DATE
SQL> --   RATING		7 LAST_UPDATED_BY	   NOT NULL NUMBER(22)
SQL> --   RATING		8 LAST_UPDATE_DATE	   NOT NULL DATE
SQL> --
SQL> --   8 rows selected.
SQL> --
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Validate the primary and non-unique contraints.
SQL> -- ------------------------------------------------------------------
SQL> 
SQL> COLUMN constraint_name   FORMAT A22
SQL> COLUMN search_condition  FORMAT A36
SQL> COLUMN constraint_type   FORMAT A1
SQL> SELECT   uc.constraint_name
  2  ,	      uc.search_condition
  3  ,	      uc.constraint_type
  4  FROM     user_constraints uc INNER JOIN user_cons_columns ucc
  5  ON       uc.table_name = ucc.table_name
  6  AND      uc.constraint_name = ucc.constraint_name
  7  WHERE    uc.table_name = :table_name
  8  AND      uc.constraint_type IN (UPPER('c'),UPPER('p'))
  9  ORDER BY uc.constraint_type DESC
 10  ,	      uc.constraint_name;

Constraint Name        SEARCH_CONDITION                     C                   
---------------------- ------------------------------------ -                   
PK_RATING              <Null>                               P                   
NN_RATING_1            "RATING_AGENCY_ID" IS NOT NULL       C                   
NN_RATING_2            "RATING" IS NOT NULL                 C                   
NN_RATING_3            "CREATED_BY" IS NOT NULL             C                   
NN_RATING_4            "CREATION_DATE" IS NOT NULL          C                   
NN_RATING_5            "LAST_UPDATED_BY" IS NOT NULL        C                   
NN_RATING_6            "LAST_UPDATE_DATE" IS NOT NULL       C                   

7 rows selected.

SQL> 
SQL> -- ------------------------------------------------------------------
SQL> --  It should display the following:
SQL> -- ------------------------------------------------------------------
SQL> --
SQL> --   CONSTRAINT_NAME	 SEARCH_CONDITION		      C
SQL> --   ---------------------- ------------------------------------ -
SQL> --   PK_RATING						      P
SQL> --   NN_RATING_1		 "RATING_AGENCY_ID" IS NOT NULL       C
SQL> --   NN_RATING_2		 "RATING" IS NOT NULL		      C
SQL> --   NN_RATING_3		 "CREATED_BY" IS NOT NULL	      C
SQL> --   NN_RATING_4		 "CREATION_DATE" IS NOT NULL	      C
SQL> --   NN_RATING_5		 "LAST_UPDATED_BY" IS NOT NULL	      C
SQL> --   NN_RATING_6		 "LAST_UPDATE_DATE" IS NOT NULL       C
SQL> --
SQL> --   7 rows selected.
SQL> --
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Validate the foreign keys.
SQL> -- ------------------------------------------------------------------
SQL> 
SQL> -- Display foreign key constraints.
SQL> COL constraint_source FORMAT A38 HEADING "Constraint Name:| Table.Column"
SQL> COL references_column FORMAT A40 HEADING "References:| Table.Column"
SQL> SELECT   uc.constraint_name||CHR(10)
  2  ||      '('||ucc1.table_name||'.'||ucc1.column_name||')' constraint_source
  3  ,	     'REFERENCES'||CHR(10)
  4  ||      '('||ucc2.table_name||'.'||ucc2.column_name||')' references_column
  5  FROM     user_constraints uc
  6  ,	      user_cons_columns ucc1
  7  ,	      user_cons_columns ucc2
  8  WHERE    uc.constraint_name = ucc1.constraint_name
  9  AND      uc.r_constraint_name = ucc2.constraint_name
 10  AND      ucc1.position = ucc2.position -- Correction for multiple column primary keys.
 11  AND      uc.constraint_type = 'R'
 12  AND      ucc1.table_name = :table_name
 13  ORDER BY ucc1.table_name
 14  ,	      uc.constraint_name;

Constraint Name:                       References:                              
 Table.Column                           Table.Column                            
-------------------------------------- ---------------------------------------- 
FK_RATING_1                            REFERENCES                               
(RATING.RATING_AGENCY_ID)              (RATING_AGENCY.RATING_AGENCY_ID)         
                                                                                
FK_RATING_2                            REFERENCES                               
(RATING.CREATED_BY)                    (SYSTEM_USER.SYSTEM_USER_ID)             
                                                                                
FK_RATING_3                            REFERENCES                               
(RATING.LAST_UPDATED_BY)               (SYSTEM_USER.SYSTEM_USER_ID)             
                                                                                

3 rows selected.

SQL> 
SQL> -- ------------------------------------------------------------------
SQL> --  It should display the following:
SQL> -- ------------------------------------------------------------------
SQL> --
SQL> --   Constraint Name:			 References:
SQL> --   Table.Column				 Table.Column
SQL> --   -------------------------------------- ----------------------------------------
SQL> --   FK_RATING_1				 REFERENCES
SQL> --   (RATING.RATING_AGENCY_ID)		 (RATING_AGENCY.RATING_AGENCY_ID)
SQL> --
SQL> --   FK_RATING_2				 REFERENCES
SQL> --   (RATING.CREATED_BY)			 (SYSTEM_USER.SYSTEM_USER_ID)
SQL> --
SQL> --   FK_RATING_3				 REFERENCES
SQL> --   (RATING.LAST_UPDATED_BY)		 (SYSTEM_USER.SYSTEM_USER_ID)
SQL> --
SQL> --   3 rows selected.
SQL> --
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Validate the primary and unique constraint.
SQL> -- ------------------------------------------------------------------
SQL> 
SQL> COLUMN index_name	    FORMAT A20 HEADING "Unique Indexes Names"
SQL> COLUMN column_position FORMAT 999 HEADING "Column|Position"
SQL> COLUMN column_name     FORMAT A22 HEADING "Column|Name"
SQL> SELECT   ui.index_name
  2  ,	      uic.column_position
  3  ,	      uic.column_name
  4  FROM     user_indexes ui INNER JOIN user_ind_columns uic
  5  ON       ui.index_name = uic.index_name
  6  AND      ui.table_name = uic.table_name
  7  WHERE    ui.table_name = :table_name;

                       Column Column                                            
Unique Indexes Names Position Name                                              
-------------------- -------- ----------------------                            
PK_RATING                   1 RATING_ID                                         
UQ_RATING                   1 RATING                                            

2 rows selected.

SQL> 
SQL> -- ------------------------------------------------------------------
SQL> --  It should display the following:
SQL> -- ------------------------------------------------------------------
SQL> --
SQL> -- 			 Column Column
SQL> --   Unique Indexes Names Position Name
SQL> --   -------------------- -------- ----------------------
SQL> --   PK_RATING		      1 RATING_ID
SQL> --   UQ_RATING		      2 RATING
SQL> --
SQL> --   2 rows selected.
SQL> --
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Enter the CREATE statement for the rating_s1 sequence that starts
SQL> --  with 1001 here:
SQL> -- ======================================================================
SQL> 
SQL> 
SQL> CREATE SEQUENCE rating_s1
  2   START WITH     1001;

Sequence created.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> -- ======================================================================
SQL> --  Validate the creation of the correct sequence.
SQL> -- ------------------------------------------------------------------
SQL> 
SQL> COLUMN sequence_name FORMAT A20 HEADING "Sequence Name"
SQL> SELECT   sequence_name
  2  FROM     user_sequences
  3  WHERE    sequence_name = :table_name||'_S1';

Sequence Name                                                                   
--------------------                                                            
RATING_S1                                                                       

1 row selected.

SQL> 
SQL> -- ------------------------------------------------------------------
SQL> --  It should display the following:
SQL> -- ------------------------------------------------------------------
SQL> --
SQL> --  Sequence Name
SQL> --  --------------------
SQL> --  RATING_S1
SQL> --
SQL> --  1 row selected.
SQL> --
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --   Insert two rows into the rating table with the following
SQL> --   information for the columns. Your manager told you to exclude the
SQL> --   description column until later in the project.
SQL> --
SQL> --   Row #1:
SQL> --   -------
SQL> --   RATING_ID ...................  rating_s1.NEXTVAL
SQL> --   RATING_AGENCY_ID ............  Scalar subquery for 'MPAA'
SQL> --   RATING (one for each value).. 'G','PG','PG-13','R','NR','NC-17'
SQL> --   CREATED_BY ..................  Scalar subquery where system_user_name
SQL> -- 				 is equal to 'DBA2'
SQL> --   CREATION_DATE ...............  SYSDATE
SQL> --   LAST_UPDATED_BY  ............  Scalar subquery where system_user_name
SQL> -- 				 is equal to 'DBA2'
SQL> --   LAST_UPDATE_DATE ............  SYSDATE
SQL> --
SQL> --   Row #2:
SQL> --   -------
SQL> --   RATING_ID ...................  rating_s1.NEXTVAL
SQL> --   RATING_AGENCY_ID ............  Scalar subquery for 'ESRB'
SQL> --   RATING (one for each value).. 'Everyone','Teen','Mature'
SQL> --   CREATED_BY ..................  Scalar subquery where system_user_name
SQL> -- 				 is equal to 'DBA2'
SQL> --   CREATION_DATE ...............  SYSDATE
SQL> --   LAST_UPDATED_BY  ............  Scalar subquery where system_user_name
SQL> -- 				 is equal to 'DBA2'
SQL> --   LAST_UPDATE_DATE ............  SYSDATE
SQL> --
SQL> -- ------------------------------------------------------------------
SQL> --  The INSERT statement has the following protoype:
SQL> -- ------------------------------------------------------------------
SQL> --
SQL> --    INSERT INTO table_name
SQL> --    ( comma-separated column_name_list )
SQL> --    VALUES
SQL> --    ( comma-separated value_list );
SQL> --
SQL> --    HINT: You can substitute scalar queries for values in the
SQL> -- 	 value list of an INSERT statement.
SQL> --
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Enter the INSERT statements here:
SQL> -- ======================================================================
SQL> insert into rating
  2  (RATING_ID
  3  ,RATING_AGENCY_ID
  4  ,RATING
  5  ,CREATED_BY
  6  ,CREATION_DATE
  7  ,LAST_UPDATED_BY
  8  ,LAST_UPDATE_DATE)
  9  values(
 10  rating_s1.NEXTVAL,
 11  (select RATING_AGENCY_ID
 12  from rating_agency
 13  where rating_agency_abbr = 'MPAA'),
 14  'G',
 15  (select system_user_id
 16  from system_user
 17  where system_user_name = 'DBA2'),
 18  SYSDATE,
 19  (select system_user_id
 20  from system_user
 21  where system_user_name = 'DBA2'),
 22  SYSDATE);

1 row created.

SQL> 
SQL> insert into rating
  2  (RATING_ID
  3  ,RATING_AGENCY_ID
  4  ,RATING
  5  ,CREATED_BY
  6  ,CREATION_DATE
  7  ,LAST_UPDATED_BY
  8  ,LAST_UPDATE_DATE)
  9  values(
 10  rating_s1.NEXTVAL,
 11  (select RATING_AGENCY_ID
 12  from rating_agency
 13  where rating_agency_abbr = 'MPAA'),
 14  'PG',
 15  (select system_user_id
 16  from system_user
 17  where system_user_name = 'DBA2'),
 18  SYSDATE,
 19  (select system_user_id
 20  from system_user
 21  where system_user_name = 'DBA2'),
 22  SYSDATE);

1 row created.

SQL> 
SQL> insert into rating
  2  (RATING_ID
  3  ,RATING_AGENCY_ID
  4  ,RATING
  5  ,CREATED_BY
  6  ,CREATION_DATE
  7  ,LAST_UPDATED_BY
  8  ,LAST_UPDATE_DATE)
  9  values(
 10  rating_s1.NEXTVAL,
 11  (select RATING_AGENCY_ID
 12  from rating_agency
 13  where rating_agency_abbr = 'MPAA'),
 14  'PG-13',
 15  (select system_user_id
 16  from system_user
 17  where system_user_name = 'DBA2'),
 18  SYSDATE,
 19  (select system_user_id
 20  from system_user
 21  where system_user_name = 'DBA2'),
 22  SYSDATE);

1 row created.

SQL> 
SQL> insert into rating
  2  (RATING_ID
  3  ,RATING_AGENCY_ID
  4  ,RATING
  5  ,CREATED_BY
  6  ,CREATION_DATE
  7  ,LAST_UPDATED_BY
  8  ,LAST_UPDATE_DATE)
  9  values(
 10  rating_s1.NEXTVAL,
 11  (select RATING_AGENCY_ID
 12  from rating_agency
 13  where rating_agency_abbr = 'MPAA'),
 14  'R',
 15  (select system_user_id
 16  from system_user
 17  where system_user_name = 'DBA2'),
 18  SYSDATE,
 19  (select system_user_id
 20  from system_user
 21  where system_user_name = 'DBA2'),
 22  SYSDATE);

1 row created.

SQL> 
SQL> insert into rating
  2  (RATING_ID
  3  ,RATING_AGENCY_ID
  4  ,RATING
  5  ,CREATED_BY
  6  ,CREATION_DATE
  7  ,LAST_UPDATED_BY
  8  ,LAST_UPDATE_DATE)
  9  values(
 10  rating_s1.NEXTVAL,
 11  (select RATING_AGENCY_ID
 12  from rating_agency
 13  where rating_agency_abbr = 'MPAA'),
 14  'NR',
 15  (select system_user_id
 16  from system_user
 17  where system_user_name = 'DBA2'),
 18  SYSDATE,
 19  (select system_user_id
 20  from system_user
 21  where system_user_name = 'DBA2'),
 22  SYSDATE);

1 row created.

SQL> 
SQL> insert into rating
  2  (RATING_ID
  3  ,RATING_AGENCY_ID
  4  ,RATING
  5  ,CREATED_BY
  6  ,CREATION_DATE
  7  ,LAST_UPDATED_BY
  8  ,LAST_UPDATE_DATE)
  9  values(
 10  rating_s1.NEXTVAL,
 11  (select RATING_AGENCY_ID
 12  from rating_agency
 13  where rating_agency_abbr = 'MPAA'),
 14  'NC-17',
 15  (select system_user_id
 16  from system_user
 17  where system_user_name = 'DBA2'),
 18  SYSDATE,
 19  (select system_user_id
 20  from system_user
 21  where system_user_name = 'DBA2'),
 22  SYSDATE);

1 row created.

SQL> 
SQL> 
SQL> insert into rating
  2  (RATING_ID
  3  ,RATING_AGENCY_ID
  4  ,RATING
  5  ,CREATED_BY
  6  ,CREATION_DATE
  7  ,LAST_UPDATED_BY
  8  ,LAST_UPDATE_DATE)
  9  values(
 10  rating_s1.NEXTVAL,
 11  (select RATING_AGENCY_ID
 12  from rating_agency
 13  where rating_agency_abbr = 'ESRB'),
 14  'Everyone',
 15  (select system_user_id
 16  from system_user
 17  where system_user_name = 'DBA2'),
 18  SYSDATE,
 19  (select system_user_id
 20  from system_user
 21  where system_user_name = 'DBA2'),
 22  SYSDATE);

1 row created.

SQL> 
SQL> insert into rating
  2  (RATING_ID
  3  ,RATING_AGENCY_ID
  4  ,RATING
  5  ,CREATED_BY
  6  ,CREATION_DATE
  7  ,LAST_UPDATED_BY
  8  ,LAST_UPDATE_DATE)
  9  values(
 10  rating_s1.NEXTVAL,
 11  (select RATING_AGENCY_ID
 12  from rating_agency
 13  where rating_agency_abbr = 'ESRB'),
 14  'Teen',
 15  (select system_user_id
 16  from system_user
 17  where system_user_name = 'DBA2'),
 18  SYSDATE,
 19  (select system_user_id
 20  from system_user
 21  where system_user_name = 'DBA2'),
 22  SYSDATE);

1 row created.

SQL> 
SQL> 
SQL> insert into rating
  2  (RATING_ID
  3  ,RATING_AGENCY_ID
  4  ,RATING
  5  ,CREATED_BY
  6  ,CREATION_DATE
  7  ,LAST_UPDATED_BY
  8  ,LAST_UPDATE_DATE)
  9  values(
 10  rating_s1.NEXTVAL,
 11  (select RATING_AGENCY_ID
 12  from rating_agency
 13  where rating_agency_abbr = 'ESRB'),
 14  'Mature',
 15  (select system_user_id
 16  from system_user
 17  where system_user_name = 'DBA2'),
 18  SYSDATE,
 19  (select system_user_id
 20  from system_user
 21  where system_user_name = 'DBA2'),
 22  SYSDATE);

1 row created.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> 
SQL> 
SQL> -- ======================================================================
SQL> --  Validate the insertion of the two rows with the following query:
SQL> -- ------------------------------------------------------------------
SQL> 
SQL> COL rating_id	     FORMAT 9999  HEADING "Rating|ID #"
SQL> COL rating 	     FORMAT A8	  HEADING "Rating"
SQL> COL rating_agency_id    FORMAT 9999  HEADING "Rating|Agency|ID #"
SQL> COL rating_agency_abbr  FORMAT A6	  HEADING "Rating|Agency|Abbr"
SQL> COL rating_agency_name  FORMAT A40   HEADING "Rating Agency"
SQL> SELECT   r.rating_id
  2  ,	      r.rating_agency_id
  3  ,	      ra.rating_agency_abbr
  4  ,	      r.rating
  5  FROM     rating r JOIN rating_agency ra
  6  ON       r.rating_agency_id = ra.rating_agency_id;

       Rating Rating                                                            
Rating Agency Agency                                                            
  ID #   ID # Abbr   Rating                                                     
------ ------ ------ --------                                                   
  1001   1002 MPAA   G                                                          
  1002   1002 MPAA   PG                                                         
  1003   1002 MPAA   PG-13                                                      
  1004   1002 MPAA   R                                                          
  1005   1002 MPAA   NR                                                         
  1006   1002 MPAA   NC-17                                                      
  1007   1001 ESRB   Everyone                                                   
  1008   1001 ESRB   Teen                                                       
  1009   1001 ESRB   Mature                                                     

9 rows selected.

SQL> 
SQL> -- ------------------------------------------------------------------
SQL> --  It should display the following:
SQL> -- ------------------------------------------------------------------
SQL> --
SQL> -- 	 Rating Rating
SQL> --   Rating Agency Agency
SQL> --     ID #   ID # Abbr   Rating
SQL> --   ------ ------ ------ --------
SQL> --     1001   1002 MPAA   G
SQL> --     1002   1002 MPAA   PG
SQL> --     1003   1002 MPAA   PG-13
SQL> --     1004   1002 MPAA   R
SQL> --     1005   1002 MPAA   NR
SQL> --     1006   1002 MPAA   NC-17
SQL> --     1007   1001 ESRB   Everyone
SQL> --     1008   1001 ESRB   Teen
SQL> --     1009   1001 ESRB   Mature
SQL> --
SQL> --   9 rows selected.
SQL> --
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Step #3
SQL> --  -------
SQL> --   Use the ALTER statement to add a rating_id column to the item
SQL> --   table. The rating_id column should use a NUMBER data type and
SQL> --   have a foreign key constraint that references it to the rating_id
SQL> --   column in the rating table.
SQL> --
SQL> --   HINT: You can't add a NOT NULL constained column when there are
SQL> -- 	rows in the table, which means you add it as nullable and
SQL> -- 	you add the not null constraint after you have put data in
SQL> -- 	all the rows.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: This USES the ALTER statement.
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Assign bind variable for rating_agency table and
SQL> --  sequence name; and this will set a default session variable to
SQL> --  ensure diagnostic scripts run consistently.
SQL> -- ------------------------------------------------------------------
SQL> 
SQL> BEGIN
  2    :table_name := UPPER('item');
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> 
SQL> --  Verify table name.
SQL> SELECT :table_name FROM dual;

:TABLE_NAME                                                                     
--------------------------------                                                
ITEM                                                                            

1 row selected.

SQL> 
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Enter the ALTER statement to add the rating_id column to the item
SQL> --  table here, and another ALTER statement to add a foreign key
SQL> --  constraint on the item table's rating_id column that references
SQL> --  the rating table's rating_id column as a primary key.
SQL> -- ======================================================================
SQL> 
SQL> 
SQL> alter table item
  2  add rating_id number
  3  add constraint FK_ITEM_4 foreign key(rating_id) references rating(rating_id);

Table altered.

SQL> 
SQL> 
SQL> -- ======================================================================
SQL> --  Validate the columns, data types, and not null constraints.
SQL> -- ------------------------------------------------------------------
SQL> 
SQL> COLUMN table_name	FORMAT A16  HEADING "Table Name"
SQL> COLUMN column_id	FORMAT 9999 HEADING "Column|ID #"
SQL> COLUMN column_name FORMAT A24  HEADING "Column Name"
SQL> COLUMN nullable	FORMAT A8   HEADING "Nullable"
SQL> COLUMN data_type	FORMAT A14  HEADING "Data Type"
SQL> SELECT   table_name
  2  ,	      column_id
  3  ,	      column_name
  4  ,	      CASE
  5  		WHEN nullable = 'N' THEN 'NOT NULL'
  6  		ELSE ''
  7  	      END AS nullable
  8  ,	      CASE
  9  		WHEN data_type IN ('CHAR','VARCHAR2','NUMBER') THEN
 10  		  data_type||'('||data_length||')'
 11  		ELSE
 12  		  data_type
 13  	      END AS data_type
 14  FROM     user_tab_columns
 15  WHERE    table_name = :table_name
 16  ORDER BY 2;

                 Column                                                         
Table Name         ID # Column Name              Nullable Data Type             
---------------- ------ ------------------------ -------- --------------        
ITEM                  1 ITEM_ID                  NOT NULL NUMBER(22)            
ITEM                  2 ITEM_BARCODE             NOT NULL VARCHAR2(14)          
ITEM                  3 ITEM_TYPE                NOT NULL NUMBER(22)            
ITEM                  4 ITEM_TITLE               NOT NULL VARCHAR2(60)          
ITEM                  5 ITEM_SUBTITLE            <Null>   VARCHAR2(60)          
ITEM                  6 ITEM_RATING              NOT NULL VARCHAR2(8)           
ITEM                  7 ITEM_RELEASE_DATE        NOT NULL DATE                  
ITEM                  8 CREATED_BY               NOT NULL NUMBER(22)            
ITEM                  9 CREATION_DATE            NOT NULL DATE                  
ITEM                 10 LAST_UPDATED_BY          NOT NULL NUMBER(22)            
ITEM                 11 LAST_UPDATE_DATE         NOT NULL DATE                  
ITEM                 12 RATING_ID                <Null>   NUMBER(22)            

12 rows selected.

SQL> 
SQL> -- ------------------------------------------------------------------
SQL> --  It should display the following:
SQL> -- ------------------------------------------------------------------
SQL> --
SQL> -- 		   Column
SQL> --   Table Name	     ID # Column Name		   Nullable Data Type
SQL> --   ---------------- ------ ------------------------ -------- --------------
SQL> --   ITEM			1 ITEM_ID		   NOT NULL NUMBER(22)
SQL> --   ITEM			2 ITEM_BARCODE		   NOT NULL VARCHAR2(14)
SQL> --   ITEM			3 ITEM_TYPE		   NOT NULL NUMBER(22)
SQL> --   ITEM			4 ITEM_TITLE		   NOT NULL VARCHAR2(60)
SQL> --   ITEM			5 ITEM_SUBTITLE 		    VARCHAR2(60)
SQL> --   ITEM			6 ITEM_RATING		   NOT NULL VARCHAR2(8)
SQL> --   ITEM			7 ITEM_RELEASE_DATE	   NOT NULL DATE
SQL> --   ITEM			8 CREATED_BY		   NOT NULL NUMBER(22)
SQL> --   ITEM			9 CREATION_DATE 	   NOT NULL DATE
SQL> --   ITEM		       10 LAST_UPDATED_BY	   NOT NULL NUMBER(22)
SQL> --   ITEM		       11 LAST_UPDATE_DATE	   NOT NULL DATE
SQL> --   ITEM		       12 RATING_ID			    NUMBER(22)
SQL> --
SQL> --   12 rows selected.
SQL> --
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Validate the foreign keys.
SQL> -- ------------------------------------------------------------------
SQL> 
SQL> -- Display foreign key constraints.
SQL> COL constraint_source FORMAT A38 HEADING "Constraint Name:| Table.Column"
SQL> COL references_column FORMAT A40 HEADING "References:| Table.Column"
SQL> SELECT   uc.constraint_name||CHR(10)
  2  ||      '('||ucc1.table_name||'.'||ucc1.column_name||')' constraint_source
  3  ,	     'REFERENCES'||CHR(10)
  4  ||      '('||ucc2.table_name||'.'||ucc2.column_name||')' references_column
  5  FROM     user_constraints uc
  6  ,	      user_cons_columns ucc1
  7  ,	      user_cons_columns ucc2
  8  WHERE    uc.constraint_name = ucc1.constraint_name
  9  AND      uc.r_constraint_name = ucc2.constraint_name
 10  AND      ucc1.position = ucc2.position -- Correction for multiple column primary keys.
 11  AND      uc.constraint_type = 'R'
 12  AND      ucc1.table_name = :table_name
 13  ORDER BY ucc1.table_name
 14  ,	      uc.constraint_name;

Constraint Name:                       References:                              
 Table.Column                           Table.Column                            
-------------------------------------- ---------------------------------------- 
FK_ITEM_1                              REFERENCES                               
(ITEM.ITEM_TYPE)                       (COMMON_LOOKUP.COMMON_LOOKUP_ID)         
                                                                                
FK_ITEM_2                              REFERENCES                               
(ITEM.CREATED_BY)                      (SYSTEM_USER.SYSTEM_USER_ID)             
                                                                                
FK_ITEM_3                              REFERENCES                               
(ITEM.LAST_UPDATED_BY)                 (SYSTEM_USER.SYSTEM_USER_ID)             
                                                                                
FK_ITEM_4                              REFERENCES                               
(ITEM.RATING_ID)                       (RATING.RATING_ID)                       
                                                                                

4 rows selected.

SQL> 
SQL> -- ------------------------------------------------------------------
SQL> --  It should display the following:
SQL> -- ------------------------------------------------------------------
SQL> --
SQL> --   Constraint Name:			 References:
SQL> --    Table.Column 			  Table.Column
SQL> --   -------------------------------------- ----------------------------------------
SQL> --   FK_ITEM_1				 REFERENCES
SQL> --   (ITEM.ITEM_TYPE)			 (COMMON_LOOKUP.COMMON_LOOKUP_ID)
SQL> --
SQL> --   FK_ITEM_2				 REFERENCES
SQL> --   (ITEM.CREATED_BY)			 (SYSTEM_USER.SYSTEM_USER_ID)
SQL> --
SQL> --   FK_ITEM_3				 REFERENCES
SQL> --   (ITEM.LAST_UPDATED_BY)		 (SYSTEM_USER.SYSTEM_USER_ID)
SQL> --
SQL> --   FK_ITEM_4				 REFERENCES
SQL> --   (ITEM.RATING_ID)			 (RATING.RATING_ID)
SQL> --
SQL> --   4 rows selected.
SQL> --
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Step #4
SQL> --  -------
SQL> --   There is a non-compliant item_rating value of 'PG13' in the item
SQL> --   table. Use an UPDATE statement to convert it from 'PG13' to
SQL> --   'PG-13'. After you have updated the non-compliant item_rating
SQL> --   value, use a join to update the rating_id column in the item
SQL> --   table for all rows.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: This USES the UPDATE statement.
SQL> -- ----------------------------------------------------------------------
SQL> --
SQL> COL item_rating	FORMAT A8  HEADING "Item|Rating"
SQL> SELECT item_rating
  2  FROM   item
  3  WHERE  item_rating LIKE '%13';

Item                                                                            
Rating                                                                          
--------                                                                        
PG13                                                                            

1 row selected.

SQL> --
SQL> -- ----------------------------------------------------------------------
SQL> --  Anticipated Results
SQL> -- ----------------------------------------------------------------------
SQL> --   Item
SQL> --   Rating
SQL> --   --------
SQL> --   PG-13
SQL> --
SQL> --   1 row selected.
SQL> -- ======================================================================
SQL> --
SQL> -- ----------------------------------------------------------------------
SQL> --  Use the following correlated UPDATE statement to update the new
SQL> --  rating_id column in the item table:
SQL> -- ----------------------------------------------------------------------
SQL> --
SQL> UPDATE item i
  2  SET    i.rating_id = (SELECT r.rating_id
  3  			   FROM   rating r
  4  			   WHERE  r.rating = i.item_rating);

21 rows updated.

SQL> --
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Step #5
SQL> --  -------
SQL> --   Cleanup from the changes by doing the following dropping the
SQL> --   now redundant item_rating column from the item table, then add
SQL> --   a not null constraint on the rating_id column of the item table.
SQL> -- ----------------------------------------------------------------------
SQL> --  Uses: This USES the ALTER statement with a DROP and MODIFY option.
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Enter the ALTER statements here:
SQL> -- ======================================================================
SQL> update item
  2  set rating_id = 1002
  3  where item_title = 'Star Wars III';

1 row updated.

SQL> 
SQL> alter table item
  2  drop column item_rating;

Table altered.

SQL> alter table item modify rating_id constraint
  2  NN_ITEM_10 not null;

Table altered.

SQL> 
SQL> 
SQL> 
SQL> -- ======================================================================
SQL> --  Validate the columns, data types, and not null constraints.
SQL> -- ------------------------------------------------------------------
SQL> 
SQL> COLUMN table_name	FORMAT A16  HEADING "Table Name"
SQL> COLUMN column_id	FORMAT 9999 HEADING "Column|ID #"
SQL> COLUMN column_name FORMAT A24  HEADING "Column Name"
SQL> COLUMN nullable	FORMAT A8   HEADING "Nullable"
SQL> COLUMN data_type	FORMAT A14  HEADING "Data Type"
SQL> SELECT   table_name
  2  ,	      column_id
  3  ,	      column_name
  4  ,	      CASE
  5  		WHEN nullable = 'N' THEN 'NOT NULL'
  6  		ELSE ' '
  7  	      END AS nullable
  8  ,	      CASE
  9  		WHEN data_type IN ('CHAR','VARCHAR2','NUMBER') THEN
 10  		  data_type||'('||data_length||')'
 11  		ELSE
 12  		  data_type
 13  	      END AS data_type
 14  FROM     user_tab_columns
 15  WHERE    table_name = :table_name
 16  ORDER BY 2;

                 Column                                                         
Table Name         ID # Column Name              Nullable Data Type             
---------------- ------ ------------------------ -------- --------------        
ITEM                  1 ITEM_ID                  NOT NULL NUMBER(22)            
ITEM                  2 ITEM_BARCODE             NOT NULL VARCHAR2(14)          
ITEM                  3 ITEM_TYPE                NOT NULL NUMBER(22)            
ITEM                  4 ITEM_TITLE               NOT NULL VARCHAR2(60)          
ITEM                  5 ITEM_SUBTITLE                     VARCHAR2(60)          
ITEM                  6 ITEM_RELEASE_DATE        NOT NULL DATE                  
ITEM                  7 CREATED_BY               NOT NULL NUMBER(22)            
ITEM                  8 CREATION_DATE            NOT NULL DATE                  
ITEM                  9 LAST_UPDATED_BY          NOT NULL NUMBER(22)            
ITEM                 10 LAST_UPDATE_DATE         NOT NULL DATE                  
ITEM                 11 RATING_ID                NOT NULL NUMBER(22)            

11 rows selected.

SQL> 
SQL> -- ------------------------------------------------------------------
SQL> --  It should display the following:
SQL> -- ------------------------------------------------------------------
SQL> --
SQL> -- 		   Column
SQL> --   Table Name	     ID # Column Name		   Nullable Data Type
SQL> --   ---------------- ------ ------------------------ -------- --------------
SQL> --   ITEM			1 ITEM_ID		   NOT NULL NUMBER(22)
SQL> --   ITEM			2 ITEM_BARCODE		   NOT NULL VARCHAR2(14)
SQL> --   ITEM			3 ITEM_TYPE		   NOT NULL NUMBER(22)
SQL> --   ITEM			4 ITEM_TITLE		   NOT NULL VARCHAR2(60)
SQL> --   ITEM			5 ITEM_SUBTITLE 		    VARCHAR2(60)
SQL> --   ITEM			6 ITEM_RELEASE_DATE	   NOT NULL DATE
SQL> --   ITEM			7 CREATED_BY		   NOT NULL NUMBER(22)
SQL> --   ITEM			8 CREATION_DATE 	   NOT NULL DATE
SQL> --   ITEM			9 LAST_UPDATED_BY	   NOT NULL NUMBER(22)
SQL> --   ITEM		       10 LAST_UPDATE_DATE	   NOT NULL DATE
SQL> --   ITEM		       11 RATING_ID		   NOT NULL NUMBER(22)
SQL> --
SQL> --   11 rows selected.
SQL> --
SQL> -- ======================================================================
SQL> 
SQL> -- ======================================================================
SQL> --  Validate the primary and non-unique contraints.
SQL> -- ------------------------------------------------------------------
SQL> 
SQL> COLUMN constraint_name   FORMAT A22
SQL> COLUMN search_condition  FORMAT A36
SQL> COLUMN constraint_type   FORMAT A1
SQL> SELECT   uc.constraint_name
  2  ,	      uc.search_condition
  3  ,	      uc.constraint_type
  4  FROM     user_constraints uc INNER JOIN user_cons_columns ucc
  5  ON       uc.table_name = ucc.table_name
  6  AND      uc.constraint_name = ucc.constraint_name
  7  WHERE    uc.table_name = :table_name
  8  AND      uc.constraint_type IN (UPPER('c'),UPPER('p'))
  9  ORDER BY uc.constraint_type DESC
 10  ,	      LENGTH(uc.constraint_name)
 11  ,	      uc.constraint_name;

Constraint Name        SEARCH_CONDITION                     C                   
---------------------- ------------------------------------ -                   
PK_ITEM_1              <Null>                               P                   
NN_ITEM_1              "ITEM_BARCODE" IS NOT NULL           C                   
NN_ITEM_2              "ITEM_TYPE" IS NOT NULL              C                   
NN_ITEM_3              "ITEM_TITLE" IS NOT NULL             C                   
NN_ITEM_5              "ITEM_RELEASE_DATE" IS NOT NULL      C                   
NN_ITEM_6              "CREATED_BY" IS NOT NULL             C                   
NN_ITEM_7              "CREATION_DATE" IS NOT NULL          C                   
NN_ITEM_8              "LAST_UPDATED_BY" IS NOT NULL        C                   
NN_ITEM_9              "LAST_UPDATE_DATE" IS NOT NULL       C                   
NN_ITEM_10             "RATING_ID" IS NOT NULL              C                   

10 rows selected.

SQL> 
SQL> -- ------------------------------------------------------------------
SQL> --  It should display the following:
SQL> -- ------------------------------------------------------------------
SQL> --
SQL> --   CONSTRAINT_NAME	 SEARCH_CONDITION		      C
SQL> --   ---------------------- ------------------------------------ -
SQL> --   PK_ITEM_1						      P
SQL> --   NN_ITEM_1		 "ITEM_BARCODE" IS NOT NULL	      C
SQL> --   NN_ITEM_2		 "ITEM_TYPE" IS NOT NULL	      C
SQL> --   NN_ITEM_3		 "ITEM_TITLE" IS NOT NULL	      C
SQL> --   NN_ITEM_5		 "ITEM_RELEASE_DATE" IS NOT NULL      C
SQL> --   NN_ITEM_6		 "CREATED_BY" IS NOT NULL	      C
SQL> --   NN_ITEM_7		 "CREATION_DATE" IS NOT NULL	      C
SQL> --   NN_ITEM_8		 "LAST_UPDATED_BY" IS NOT NULL	      C
SQL> --   NN_ITEM_9		 "LAST_UPDATE_DATE" IS NOT NULL       C
SQL> --   NN_ITEM_10		 "RATING_ID" IS NOT NULL	      C
SQL> --
SQL> --   10 rows selected.
SQL> --
SQL> -- ======================================================================
SQL> 
SQL> 
SQL> SPOOL OFF
